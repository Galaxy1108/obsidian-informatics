#include <bits/stdc++.h>
using namespace std;
const int N = 600010, P = 998244353;
int Num, n, m, tot;
vector <int> vec[N];
int col[N], dep[N], p[N], cnt[N];
int fac[N], ifac[N], f[N], g[N];
int pls(int x, int y) {
    return x + y < P ? x + y : x + y - P;
}
int mul(int x, int y) {
    return (long long) x * y % P;
}
int quick_pow(int x, int y) {
    int res = 1;
    for (; y; y >>= 1, x = mul(x, x))
        if (y & 1)
            res = mul(res, x);
    return res;
}
int main() {
    freopen("youup.in", "r", stdin);
    freopen("youup.out", "w", stdout);
    scanf("%d%d%d", &Num, &n, &m);
    for (int i = 1; i < n; ++i) {
        int x, y;
        scanf("%d%d", &x, &y);
        vec[x].emplace_back(n + i);
        vec[n + i].emplace_back(y);
        vec[y].emplace_back(n + i);
        vec[n + i].emplace_back(x);
    }
    for (int i = 1; i < n << 1; ++i) {
        for (int j = 1; j < n << 1; ++j)
            dep[j] = -1;
        p[1] = i;
        col[i] = 0;
        dep[i] = 0;
        for (int j = 1, l = 1; j < n << 1; ++j)
            for (int k : vec[p[j]])
                if (!~dep[k]) {
                    dep[k] = dep[p[j]] + 1;
                    col[k] = j == 1 ? k : col[p[j]];
                    p[++l] = k;
                }
        int sz = 0;
        for (int l = 1, r = 1, d = 0; l < n << 1 && d <= m; l = ++r, ++d) {
            while (r + 1 < n << 1 && dep[p[r + 1]] == dep[p[l]])
                ++r;
            if ((i > n) ^ (d & 1))
                continue;
            int sum = 0;
            for (int k = l; k <= r; ++k) {
                ++cnt[col[p[k]]];
                ++sum;
                ++sz;
            }
            f[sz] = pls(f[sz], 1);
            for (int k : vec[i]) {
                f[sz - sum + cnt[k]] = pls(f[sz - sum + cnt[k]], P - 1);
                cnt[k] = 0;
            }
            f[sz - sum] = pls(f[sz - sum], vec[i].size() - 1);
        }
    }
    fac[0] = 1;
    for (int i = 1; i <= n; ++i)
        fac[i] = mul(fac[i - 1], i);
    ifac[n] = quick_pow(fac[n], P - 2);
    for (int i = n; i; --i)
        ifac[i - 1] = mul(ifac[i], i);
    for (int i = 0; i <= n; ++i)
        for (int j = 0; j <= i; ++j)
            g[j] = pls(g[j], mul(f[i], mul(fac[i], mul(ifac[j], ifac[i - j]))));
    for (int i = 1; i <= n; ++i)
        printf("%d ", g[i]);
    return 0;
}