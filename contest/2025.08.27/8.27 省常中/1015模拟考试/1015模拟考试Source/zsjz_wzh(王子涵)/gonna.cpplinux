#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 20010;
int n, p, ans, sum;
ll f[N], g[N];
int pcnt, pri[N], id[N], inv[N];
int mul(int x, int y) {
    return (ll) x * y % p;
}
int quick_pow(int x, int y) {
    int res = 1;
    for (; y; y >>= 1, x = mul(x, x))
        if (y & 1)
            res = mul(res, x);
    return res;
}
int main() {
    freopen("gonna.in", "r", stdin);
    freopen("gonna.out", "w", stdout);
    scanf("%d%d", &n, &p);
    for (int i = 2; i <= n; ++i)
        id[i] = -1;
    for (int i = 2; i <= n; ++i) {
        if (!~id[i])
            pri[id[i] = ++pcnt] = i;
        for (int j = 1; j <= pcnt && i * pri[j] <= n; ++j) {
            id[i * pri[j]] = 0;
            if (!(i % pri[j]))
                break;
        }
    }
    inv[1] = 1;
    for (int i = 2; i <= n; ++i)
        inv[i] = p - mul(p / i, inv[p % i]);
    for (int i = 1; i <= n; ++i) {
        int cur = i;
        for (int j = 1; pri[j] * pri[j] <= cur; ++j)
            for (; cur % pri[j] == 0; cur /= pri[j])
                ++f[j];
        if (cur > 1)
            ++f[id[cur]];
        ans = 1;
        for (int j = 1; j <= pcnt && pri[j] <= i; ++j) {
            g[j] += f[j];
            ans = mul(ans, mul(quick_pow(pri[j], (i + 1) * f[j] - 2 * g[j] + 1) - 1, inv[pri[j] - 1]));
        }
        sum += ans;
        if (sum >= p)
            sum -= p;
    }
    printf("%d\n", sum);
    return 0;
}