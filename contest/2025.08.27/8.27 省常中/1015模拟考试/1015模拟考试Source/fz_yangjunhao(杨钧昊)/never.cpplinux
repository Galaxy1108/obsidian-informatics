#pragma GCC optimize(2)
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<cstdio>
#include<cstring>
#include<cctype>
#include<bitset>
#include<cmath>
#include<vector>
#include<queue>
#include<algorithm>
#include<map>
using namespace std;
inline char nc()
{
	static char buf[99999],*l,*r;
	return l==r&&(r=(l=buf)+fread(buf,1,99999,stdin),l==r)?EOF:*l++;
}
template <class code>inline code read(const code &a)
{
    code x=0;short w=0;char ch=0;
    while(!isdigit(ch)) {w|=ch=='-';ch=nc();}
    while(isdigit(ch)) {x=(x<<3)+(x<<1)+(ch^48);ch=nc();}
    return w?-x:x;
}
void print(long long x){
	if(x<0)putchar('-'),x=-x;
	if(x>=10)print(x/10);
	putchar(x%10+48);
}
__int128 n,s,t,x,y;
__int128 check(__int128 wz){
    return wz+(s+wz*y-(t+y-1)+x-1)/x;
}
void solve(){
    n=read(n),s=read(s),t=read(t),x=read(x),y=read(y);
    if(s+(n-1)*y<t){
        print(s+n*y);putchar('\n');
    }else if(s-(n-1)*x>=t){
        print(s-n*x);putchar('\n');
    }else{
        __int128 l=1,r=1e18,kx=1;
        while(l<=r){
            __int128 mid=(l+r)>>1;
            if(check(mid)<=n)kx=mid,l=mid+1;
            else r=mid-1;
        }
        print(s+kx*y-(n-kx)*x);
        putchar('\n');
    }
}
signed main()
{
	freopen("never.in","r",stdin);
    freopen("never.out","w",stdout);
    int t=read(t);
    while(t--)solve();
	return 0;
}