#pragma GCC optimize(2)
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<cstdio>
#include<cstring>
#include<cctype>
#include<bitset>
#include<cmath>
#include<vector>
#include<queue>
#include<algorithm>
#include<map>
using namespace std;
inline char nc()
{
	static char buf[99999],*l,*r;
	return l==r&&(r=(l=buf)+fread(buf,1,99999,stdin),l==r)?EOF:*l++;
}
template <class code>inline code read(const code &a)
{
    code x=0;short w=0;char ch=0;
    while(!isdigit(ch)) {w|=ch=='-';ch=nc();}
    while(isdigit(ch)) {x=(x<<3)+(x<<1)+(ch^48);ch=nc();}
    return w?-x:x;
}
void print(long long x){
	if(x<0)putchar('-'),x=-x;
	if(x>=10)print(x/10);
	putchar(x%10+48);
}
int n,a[205];
long long m,s;
bitset<5005>dp[2005];
void solve1(){
    dp[0]=0;
    dp[0][0]=1;
    for(int i=1;i<=m;i++){
        dp[i]=0;
        for(int j=1;j<=n;j++){
            dp[i]^=(dp[i-1]<<a[j]);
        }
    }
    if(dp[m][s])puts("1");
    else puts("0");
}
void solve(){
    m=read(m),s=read(s),n=read(n);
    for(int i=1;i<=n;i++)a[i]=read(a[i]);
    if(s<=5000&&m<=2000)solve1();
    else{
        puts("0");
    }
}
signed main()
{
	freopen("give.in","r",stdin);
    freopen("give.out","w",stdout);
    int t=read(t);
    while(t--)solve();
	return 0;
}