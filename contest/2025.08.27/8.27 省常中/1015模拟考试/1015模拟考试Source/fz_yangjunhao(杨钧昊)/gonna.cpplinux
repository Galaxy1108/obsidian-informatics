#pragma GCC optimize(2)
#pragma GCC optimize("Ofast", "inline", "-ffast-math")
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#include<cstdio>
#include<cstring>
#include<cctype>
#include<bitset>
#include<cmath>
#include<vector>
#include<queue>
#include<algorithm>
#include<map>
using namespace std;
// #define int long long
inline char nc()
{
	static char buf[99999],*l,*r;
	return l==r&&(r=(l=buf)+fread(buf,1,99999,stdin),l==r)?EOF:*l++;
}
template <class code>inline code read(const code &a)
{
    code x=0;short w=0;char ch=0;
    while(!isdigit(ch)) {w|=ch=='-';ch=nc();}
    while(isdigit(ch)) {x=(x<<3)+(x<<1)+(ch^48);ch=nc();}
    return w?-x:x;
}
void print(long long x){
	if(x<0)putchar('-'),x=-x;
	if(x>=10)print(x/10);
	putchar(x%10+48);
}
int n,p,tag[20005],inv[20005],pl[20005];
int ksm(int x,int y){
    int now=1;
    while(y){
        if(y&1)now=1ll*now*x%p;
        x=1ll*x*x%p;
        y>>=1;
    }
    return now;
}
signed main()
{
	freopen("gonna.in","r",stdin);
    freopen("gonna.out","w",stdout);
    n=read(n),p=read(p);
    for(int i=1;i<=n;i++)inv[i]=ksm(i,p-2);
    int ans=0;
    for(int i=1;i<=n;i++){
        int now=i;
        for(int k=2;k<=now;k++){
            if(now%k==0){
                int fg=0;
                while(now%k==0){
                    ++fg;
                    now/=k;
                }
                pl[k]+=fg;
            }
        }
        int su=1;
        for(int j=2;j<=i;j++){
            tag[j]+=pl[j];
            int sj=(i+1)*pl[j]-2*tag[j];
            su=1ll*su*(ksm(j,sj+1)-1)%p*inv[j-1]%p;
        }
        ans=(ans+su)%p;
    }
    printf("%d\n",ans);
	return 0;
}