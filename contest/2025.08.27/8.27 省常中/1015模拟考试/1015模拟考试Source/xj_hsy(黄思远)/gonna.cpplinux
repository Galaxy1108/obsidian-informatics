// #pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#include <bits/stdc++.h>
// #define int long long
// const long long Inf=2e18;
#define pii pair <int, int> 
#define i64 long long
using namespace std;
inline int read(void) {
	int x=0,sgn=1,ch=getchar();
	while(ch<48||57<ch) {if(ch==45)sgn=0;ch=getchar();}
	while(47<ch&&ch<58) {x=x*10+ch-48;   ch=getchar();}
	return sgn? x:-x;
}
void write(int x) {
    if(x<0) putchar('-'),x=-x;
    if(x>9) write(x/10);
    putchar(x%10+'0');
}
// #define u32 unsigned int
// #define u64 unsigned long long
// #define u128 __uint128_t
// struct barrett {
//     u32 p; u128 w;
//     barrett (u32 mod = 998244353) : p(mod), w(-1u/p) {};
//     inline u32 reduce(const u64 x) const  {
//         u32 t = x - (w*x >> 32) * p;
//         (t > p) && (t -= p);
//         return t;
//     }
// } P;
// u32 operator % (const u64 x, const barrett p) {
//     return p.reduce(x);
// }
int n,p;
bool isp[20004];
int pri[3000],cntpri;// max 2262
int sump[20004],sumpre[20004],Ansp[20004],val[220000]; // max 219138
int Ans[20004];
i64 res;
signed main() {
    // freopen("localinput" ,"r",stdin );
    // freopen("localoutput","w",stdout);
    freopen("gonna.in" ,"r",stdin );
    freopen("gonna.out","w",stdout);
    n=read(); p=read(); val[0]=1;
    for(int i=1; i<=n; ++i) Ans[i]=1;
    for(int i=2; i<=n; ++i) {
        if(!isp[i]) {
            pri[++cntpri]=i;
            for(int u=i<<1; u<=n; u+=i) isp[u]=1;
        }
    }
    for(int t=1,maxsum; t<=cntpri; ++t) {
        int q=pri[t]; sumpre[q-1]=0; maxsum=0;
        for(int i=1; i<=n; ++i) sump[i]=sump[i/q]+i/q;
        for(int i=q; i<=n; ++i) sumpre[i]=sumpre[i-1]+sump[i];
        for(int i=q; i<=n; ++i) maxsum=max(Ansp[i]=(i+1)*sump[i]-(sumpre[i]<<1),maxsum);
        val[1]=q;
        for(int i=2; i<=maxsum; ++i) val[i]=1ll*val[i-1]*q%p;
        for(int i=1; i<=maxsum; ++i) (val[i]=val[i]+val[i-1])>=p && (val[i]-=p);
        for(int i=q; i<=n; ++i) Ans[i]=1ll*Ans[i]*val[Ansp[i]]%p;
    }
    for(int i=1; i<=n; ++i) res+=Ans[i];
    write(res%p); puts("");
	return 0;
}