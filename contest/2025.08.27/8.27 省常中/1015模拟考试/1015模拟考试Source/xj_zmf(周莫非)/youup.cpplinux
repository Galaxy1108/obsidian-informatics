/*
    长弓背负，仙女月鹫，
	梦中徐来，长夜悠悠。
	今宵共君，夜赏囃子，
	盼君速归，长夜悠悠。
	睡意袭我，眼阖梦徭，
	睡意袭我，意归襁褓。
	手扶卓揭，仙女水狃，
	盼君速归，长夜悠悠。
	今宵共君，戏于西楼，
	盼君速归，长夜悠悠。
	睡意袭我，涟锜池留，
	睡意袭我，意归海角。
					                  ——《ever17》
*/

/*
	『月正笑，地正润潮，星正舞，风正凉。』
*/

/*
	『长夜伴浪破晓梦，梦晓破浪伴夜长。』
*/

//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#include <bits/stdc++.h>
using namespace std;
#define int long long
inline int read()
{
	int sum = 0, nega = 1;
	char ch = getchar();
	while (ch > '9'||ch < '0')
	{
	    if (ch == '-') nega = -1;
		ch = getchar();
	}
	while (ch <= '9' && ch >= '0') sum = sum * 10 + ch - '0', ch = getchar();
	return sum * nega;
}
const int N = 1e6 + 9, mod = 998244353;
int Num, n, x, ans[N], jc[N], inv[N], dis[109][109], dp[N << 1];
inline int Pow(int x, int y) 
{
	int res = 1, base = x;
	while(y) 
	{
		if(y & 1) res = res * base % mod;
		base = base * base % mod;
		y >>= 1;
	}
	return res;
}
inline void init(int nn) 
{
	jc[0] = 1; for (int i = 1; i <= nn; i++) jc[i] = jc[i - 1] * i % mod;
	inv[nn] = Pow(jc[nn], mod - 2);
	for (int i = nn - 1; i >= 0; i--) inv[i] = (inv[i + 1] * (i + 1)) % mod; return ; 
} 
inline int C(int x, int y) {return jc[x] * inv[y] % mod * inv[x - y] % mod;}
inline void work1() 
{
	n = read(), x = read(); init(n);
	ans[1] = n;
	if(x >= 1) ans[2] = n - 1;
	if(x >= 2) 
		for (int i = 1; i <= n; i++) ans[i] = C(n, i);
	for (int i = 1; i <= n; i++) printf("%lld ", ans[i]); exit(0);
}
inline void work2() 
{
	n = read(), x = read(); init(n);
	for (int i = 1; i <= x; i++) ans[i] = C(x, i);
	for (int i = 1; i <= x + 1; i++) ans[i] = (ans[i] + (n - x) * C(x, i - 1) % mod) % mod;
	for (int i = 1; i <= n; i++) printf("%lld ", ans[i]); exit(0);
}
inline void work()
{
	n = read(), x = read();
	for (int i = 1; i <= n; i++) 
		for (int j = 1; j <= n; j++) 
			if(i != j) dis[i][j] = 1e9; 
	for (int i = 1; i < n; i++)
	{
		int u = read(), v = read(); dis[u][v] = dis[v][u] = 1;
	}
	for (int k = 1; k <= n; k++) 
		for (int i = 1; i <= n; i++) 
			for (int j = 1; j <= n; j++) 
				dis[i][j] = min(dis[i][k] + dis[k][j], dis[i][j]);
	dp[0] = 1;
	for (int i = 1; i <= n; i++) 
		for (int j = 0; j < (1 << n); j++) 
			if(dp[j])
			{
				if(j & (1 << (i - 1))) continue;
				bool flag = 0;
				for (int k = 0; k < n; k++) 
					if(j & (1 << k)) 
						if(dis[k + 1][i] > x) 
							{flag = 1; break;}
				if(flag) continue;
				dp[j + (1 << (i - 1))] = 1;
			}
	for (int i = 0; i < (1 << n); i++) 
	{
		int prp = 0;
		for (int j = 0; j < n; j++)
			if(i & (1 << j)) prp++;
		ans[prp] += dp[i];
	}
	for (int i = 1; i <= n; i++) printf("%lld ", ans[i]); puts(""); return ;
}
signed main()
{
	freopen("youup.in", "r", stdin);
	freopen("youup.out", "w", stdout);
	Num = read();
	if(Num == 4) work1();
	else if(Num == 5) work2();
	work();
	return 0;
}
