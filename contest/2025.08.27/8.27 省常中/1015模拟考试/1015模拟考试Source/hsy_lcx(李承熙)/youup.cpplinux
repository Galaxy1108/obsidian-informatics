#include<bits/stdc++.h>
using namespace std;
const int mod=998244353;
inline int qread()
{
	int a=0;char ch=getchar();
	while(ch>'9'||ch<'0'){ch=getchar();}
	while(ch>='0'&&ch<='9'){(a*=10)+=(ch^48);ch=getchar();}
	return a;
}
int num,n,k,head[300010],tot,ans[300010],vis[300010],cnt;
long long jc[300010];
struct qxx
{
	int nex,t;
}e[600010];
inline void adde(int x,int y)
{
	e[++tot].t=y;
	e[tot].nex=head[x];
	head[x]=tot;
	return ;
}
bool dfss(int rt,int da,int de)
{
	if(vis[rt]&&de>k)return 1;
	for(int i=head[rt];i;i=e[i].nex)
	{
		if(e[i].t==da)continue;
		if(dfss(e[i].t,rt,de+1))return 1;
	}
	return 0;
}
inline bool check()
{
	for(int i=1;i<=n;++i)
	{
		if(vis[i])
		{
			if(dfss(i,0,0))return 0;
		}
	}
	return 1;
}
void dfs(int h)
{
	if(h==n+1)
	{
		ans[cnt]+=check();
		return ;
	}
	dfs(h+1);
	vis[h]=1;
	++cnt;
	dfs(h+1);
	vis[h]=0;
	--cnt;
	return ;
}
inline int qpow(long long x,int y)
{
	long long cx=1;
	while(y)
	{
		if(y&1)(cx*=x)%=mod;
		(x*=x)%=mod;
		y>>=1;
	}
	return cx;
}
inline long long C(int n,int r)
{
	long long a,b;
	b=jc[r]*jc[n-r]%mod;
	a=jc[n]*qpow(b,mod-2)%mod;
	return a;
}
int main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	num=qread();
	n=qread();
	k=qread();
	jc[1]=jc[0]=1;
	for(int i=2;i<=n;++i)jc[i]=jc[i-1]*i%mod;
	for(int i=1,u,v;i<n;++i)
	{
		u=qread();
		v=qread();
		adde(u,v);
		adde(v,u);
	}
	if(num==4)
	{
		if(k==0)
		{
			printf("%d ",n);
			for(int i=2;i<=n;++i)printf("0 ");
		}
		else if(k==1)
		{
			printf("%d %d ",n,n-1);
			for(int i=3;i<=n;++i)printf("0 ");
		}
		else 
		{
			for(int i=1;i<=n;++i)printf("%lld ",C(n,i));
		}
	}
	else if(num==5)
	{
		for(int i=1;i<=n;++i)
		{
			if(i<=k+1)printf("%lld ",C(k+1,i)+(C(k,i-1)*(n-k-1)%mod));
			else printf("0 ");
		}
	}
	else
	{
		dfs(1);
		for(int i=1;i<=n;++i)printf("%d ",ans[i]);
	}
	return 0;
}