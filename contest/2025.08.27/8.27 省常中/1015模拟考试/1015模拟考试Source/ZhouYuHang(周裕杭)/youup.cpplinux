#include <bits/stdc++.h>
#define il inline

using namespace std;

const int N = 4e5 + 10, mod = 998244353;

int num, n, x;

vector <int> e[N];

int fac[N], ifac[N];

il int inv (int a, int b = mod - 2) {
	int x = 1;
	while (b) {
		if (b & 1) x = 1ll * x * a % mod;
		a = 1ll * a * a % mod;
		b >>= 1;
	}
	return x;
}

il int C (int n, int m) {
	return (n < m ? 0 : 1ll * fac[n] * ifac[m] % mod * ifac[n - m] % mod);
}

il void add (int &a, int b) {
	a = (a + b >= mod ? a + b - mod : a + b);
}

int ans[N];

int g[25][25];

int main () {
	ios::sync_with_stdio(false);
	cin.tie(nullptr), cout.tie(nullptr);

	freopen("youup.in", "r", stdin);
	freopen("youup.out", "w", stdout);

	cin >> num >> n >> x;
	for (int i = 1; i < n; ++i) {
		int u, v;
		cin >> u >> v;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	
	fac[0] = ifac[0] = 1;
	for (int i = 1; i <= n; ++i) fac[i] = 1ll * fac[i - 1] * i % mod, ifac[i] = inv(fac[i]);
	
	if (n <= 20) {
		memset(g, 0x3f3f3f3f, sizeof g);
		for (int i = 1; i <= n; ++i) {
			for (auto j: e[i]) g[i][j] = 1;
			g[i][i] = 0;
		}
		for (int k = 1; k <= n; ++k) {
			for (int i = 1; i <= n; ++i) {
				for (int j = 1; j <= n; ++j) {
					g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
				}
			}
		}
		for (int i = 1; i < (1 << n); ++i) {
			int cnt = __builtin_popcount(i);
			bool flag = true;
			for (int j = 1; j <= n; ++j) if (i >> (j - 1) & 1) {
				for (int k = 1; k <= n; ++k) if (i >> (k - 1) & 1) {
					if (g[j][k] > x) flag = false;
				} 
			}
			ans[cnt] += flag;
		}
	} else if (num == 4) {
		if (x == 0) {
			ans[1] = n;
		} else if (x == 1) {
			ans[1] = n;
			ans[2] = n - 1;
		} else {
			for (int i = 1; i <= n; ++i) ans[i] = C(n, i);
		}
	} else if (num == 5) {
		for (int i = 1; i <= n; ++i) {
			ans[i] = ((ans[i] + 1ll * (n - x) * C(x, i - 1)) % mod + C(x, i)) % mod;
		}
	} else if (n <= 2000) {
		
	}
	
	for (int i = 1; i <= n; ++i) cout << ans[i] << ' ';

	return 0;
}