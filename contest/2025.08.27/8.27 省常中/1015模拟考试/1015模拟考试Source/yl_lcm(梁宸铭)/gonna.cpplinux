#include<bits/stdc++.h>
#define ll long long    
#define ull unsigned long long
#define db double
#define ldb long double
#define pb push_back
#define mp make_pair
#define pii pair<int, int>
#define FR first
#define SE second
using namespace std;
inline int read() {
    int x = 0; bool op = 0;
    char c = getchar();
    while(!isdigit(c))op |= (c == '-'), c = getchar();
    while(isdigit(c))x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();
    return op ? -x : x;
}
const int N = 2e4 + 10;
int n, P;
void add(int &a, int b) {a += b; (a >= P ? a -= P : 0);}
void sub(int &a, int b) {a -= b; (a < 0 ? a += P : 0);}
int tot, pri[N], vis[N];
void sieve() {
    for(int i = 2; i < N; i++) {
        if(vis[i] == false)pri[++tot] = i;
        for(int j = 1; j <= tot && i * pri[j] < N; j++) {
            vis[i * pri[j]] = true;
            if(i % pri[j] == 0)break;
        }
    }
    return ;
}
namespace bf {
    const int N = 3e3 + 10;
    const int M = 2e4 + 10;
    int s[N][M], p[N][M], res[M];
    vector<int> pw[N];
    void MAIN() {
        for(int i = 1; i <= tot && pri[i] <= n; i++) {
            for(int j = 1; j <= n; j++) {
                for(int c = pri[i]; c <= j; c *= pri[i]) {
                    s[i][j] += j / c;
                }
            }
        }
        for(int i = 1; i <= tot; i++) {
            for(int j = 1; j <= n; j++) {
                p[i][j] = p[i][j - 1] + s[i][j];
            }
        }
        int ans = 0;
        for(int i = 1; i <= n; i++)res[i] = 1;
        for(int i = 1; i <= tot && pri[i] <= n; i++) {
            int mx = 1;
            for(int j = 1; j <= n; j++) {
                mx = max(mx, (j + 1) * s[i][j] - 2 * p[i][j]);
            }
            pw[i].resize(mx + 1); pw[i][0] = 1;
            for(int j = 1, coef = 1; j <= mx; j++) {
                coef = 1ll * coef * pri[i] % P;
                add(pw[i][j], pw[i][j - 1]); add(pw[i][j], coef);
            }
            for(int j = 1; j <= n; j++) {
                int c = (j + 1) * s[i][j] - 2 * p[i][j];
                res[j] = 1ll * res[j] * pw[i][c] % P;
            }
        }
        for(int i = 1; i <= n; i++)add(ans, res[i]);
        printf("%d\n", ans);
        return ;
    }
}
int main() { 
    freopen("gonna.in", "r", stdin);
    freopen("gonna.out", "w", stdout);
    sieve();
    n = read(); P = read();
    bf::MAIN();
    return 0;
}