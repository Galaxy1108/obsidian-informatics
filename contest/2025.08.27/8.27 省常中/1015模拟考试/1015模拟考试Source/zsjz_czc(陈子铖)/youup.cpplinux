#include <iostream>
#include <cstdio>
using namespace std;
namespace IO {
	const int MAXSIZE = 1 << 20;
	char buf[MAXSIZE], *p1, *p2;
	#define gc() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, stdin), p1 == p2) ? EOF : *p1++)
	inline int rd() {
		int an(0), ch(gc());
		for (; !isdigit(ch) ; ch = gc());
		for (; isdigit(ch) ; ch = gc())
			an = (an << 3) + (an << 1) + (ch ^ 48);
		return an;
	}
}
using namespace IO;

const int N = 300050;
const long long mod = 998244353;
struct way {
	int lst, v;
}w[2 * N];
int head[N], cur;
int Num, n, len;
long long fc[50050];
inline long long ksm(long long x, long long y) {
	long long an(1);
	while (y) {
		if (y & 1)an = an * x % mod;
		x = x * x % mod;
		y >>= 1;
	}
	return an;
}
namespace st2 {
	int dis[25][25], bz[25], ans[25];
	inline void dg(int p, int cnt) {
		if (p > n)ans[cnt]++;
		else {
			int pd(1);
			for (int i(1) ; i < p ; ++i)
				if (bz[i] && dis[i][p] > len) {
					pd = 0;break;
				}
			if (pd) {
				bz[p] = 1;
				dg(p + 1, cnt + 1);
				bz[p] = 0;
			}
			dg(p + 1, cnt);
		}
	}
	inline void dfs(int st, int u, int fa) {
		for (int i(head[u]) ; i ; i = w[i].lst) {
			int v(w[i].v);
			if (v ^ fa) {
				dis[st][v] = dis[st][u] + 1;
				dfs(st, v, u);
			}
		}
	}
	inline void solve() {
		for (int i(1) ; i <= n ; ++i) {
			dis[i][i] = 0;
			dfs(i, i, 0);
		}
		dg(1, 0);
		for (int i(1) ; i <= n ; ++i)
			printf("%d ", ans[i]);
	}
}
namespace st4 {
	inline void solve() {
		if (len == 1)
			for (int i(1) ; i <= n ; ++i) {
				if (i == 1)printf("%d ", n);
				else if (i == 2)printf("%d ", n - 1);
				else printf("0 ");
			}
		else {
			for (int i(1) ; i <= n ; ++i)
				printf("%lld ", fc[n] * ksm(fc[i], mod - 2) % mod * ksm(fc[n - i], mod - 2) % mod);
		}
	}
}
namespace st5 {
	int rd[50050], dep[50050], mx, st;
	inline void dfs(int u, int fa) {
		for (int i(head[u]) ; i ; i = w[i].lst) {
			int v(w[i].v);
			if (v ^ fa) {
				dep[v] = dep[u] + 1;
				if (dep[v] > mx)mx = dep[v];
				dfs(v, u);
			}
		}
	}
	inline void solve() {
		for (int i(1) ; i <= n ; ++i) {
			for (int j(head[i]) ; j ; j = w[j].lst)
				++rd[i];
			if (rd[i] == 1)st = i;
		}
		dfs(st, 0);
	}
}
inline void add(int u, int v) {
	w[++cur] = (way) {head[u], v};
	head[u] = cur;
}
int main() {
	freopen("youup.in", "r", stdin);
	freopen("youup.out", "w", stdout);
	Num = rd();n = rd();len = rd();
	fc[0] = 1;
	for (int i(1) ; i <= n ; ++i)
		fc[i] = fc[i - 1] * i % mod;
	for (int i(1) ; i < n ; ++i) {
		int u = rd(), v = rd();
		add(u, v);add(v, u);
	}
	if (len == 0) {
		for (int i(1) ; i <= n ; ++i)
			printf("0 ");
	}
	else if (Num <= 2)st2 :: solve();
	else if (Num == 4)st4 :: solve();
	fclose(stdin);fclose(stdout);
	return 0;
}