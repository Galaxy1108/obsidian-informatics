#include<cstdio>
#include<algorithm>
using namespace std;
const int mo=998244353;
int tot,n,len,x,y,f[21][5],dep[21],ans[21],b[21],cnt;
struct node{int last,en,next;} e[110];
void add(int x,int y)
{
	e[++tot].en=y;
	e[tot].next=e[x].last;
	e[x].last=tot;
}
void dg(int x,int fa)
{
	f[x][0]=fa;dep[x]=dep[fa]+1;
	for (int i=e[x].last;i;i=e[i].next)
		if (e[i].en!=fa) dg(e[i].en,x);
}
int lca(int x,int y)
{
	if (dep[x]<dep[y]) swap(x,y);
	for (int i=4;i>=0;i--)
		if (dep[f[x][i]]>=dep[y]) x=f[x][i];
	if (x==y) return x;
	for (int i=4;i>=0;i--)
		if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];
	return f[x][0];
}
void dfs(int x)
{
	if (x>n)
	{
		if (cnt<=1) return;
		bool bj=false;
		for (int i=1;i<cnt&&!bj;i++)
			for (int j=i+1;j<=cnt;j++)
			{
				int now=lca(b[i],b[j]);
				if (dep[b[i]]+dep[b[j]]-2*dep[now]>len)
				{
					bj=true;
					break;
				}
			}
		if (!bj) ans[cnt]=(ans[cnt]+1)%mo;
		return;
	}
	dfs(x+1);
	b[++cnt]=x;
	dfs(x+1);
	--cnt;
}
int main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	scanf("%d",&n);
	scanf("%d%d",&n,&len);
	for (int i=1;i<n;i++)
		scanf("%d%d",&x,&y),add(x,y),add(y,x);
	dg(1,0);
	for (int j=1;j<=4;j++)
		for (int i=1;i<=n;i++)
			f[i][j]=f[f[i][j-1]][j-1];
	ans[1]=n;
	dfs(1);
	for (int i=1;i<=n;i++) printf("%d ",ans[i]);
	return 0;
}