#include<cstdio>
#include<cmath>
#include<vector>
#include<algorithm>
#include<cstring>
#define ll long long
#define Mn 400010
using namespace std;

const int mo=998244353;

int tr[Mn];
int _inv[Mn];

int ksm(int x,int y,int mo)
{
    int ret=1;
    for (;y;y>>=1)
    {
        if (y&1) ret=1ll*ret*x%mo;
        x=1ll*x*x%mo;
    }
    return ret;
}

struct poly{
    vector<int> a;
    inline poly(int x=0)
    {
        if (x) a.push_back(x);
    }
    inline void resize(int len)
    {
        a.resize(len);
    }
    inline int size()
    {
        return a.size();
    }
    inline void shrink()
    {
        for (;!a.empty()&&!a.back();a.pop_back());
    }
    inline int operator [] (const int x) const
    {
        if (x<0||x>=(int)a.size()) return 0;
        return a[x];
    }
    inline void NTT(int flag)
    {
        int n=size();
        static const int G=3,iG=ksm(G,mo-2,mo);
        for (int i=0;i<n;i++)
            if (i<tr[i]) swap(a[i],a[tr[i]]);
        for (int p=2;p<=n;p<<=1)
        {
            int len=p>>1,tG=ksm(flag?G:iG,(mo-1)/p,mo);
            for (int k=0;k<n;k+=p)
            {
                int buf=1;
                for (int l=k;l<k+len;l++)
                {
                    int x=a[l],y=1ll*buf*a[l+len]%mo;
                    a[l]=(x+y)%mo;
                    a[l+len]=(x-y+mo)%mo;
                    buf=1ll*buf*tG%mo;
                }
            }
        }
        if (!flag)
        {
            int in=ksm(n,mo-2,mo);
            for (int i=0;i<n;i++)
                a[i]=1ll*a[i]*in%mo;
        }
    }
    inline friend poly operator * (poly f,poly g)
    {
        if (!f.size()||!g.size()) return poly();
        int n=1;
        for (;n<f.size()+g.size()-1;n<<=1);
        for (int i=0;i<n;i++)
            tr[i]=(tr[i>>1]>>1)|((i&1)?n>>1:0);
        f.resize(n);g.resize(n);
        f.NTT(1);g.NTT(1);
        for (int i=0;i<n;i++)
            f.a[i]=1ll*f[i]*g[i]%mo;
        f.NTT(0);f.shrink();
        return f;
    }
    inline poly modx(int n)
    {
        poly g=(*this);
        g.resize(min(g.size(),n));
        return g;
    }
}ret,ans;

void init()
{
    _inv[1]=1;
    for (int i=2;i<Mn;i++)
        _inv[i]=1ll*(mo-mo/i)*_inv[mo%i]%mo;
}

#define gc() (fp==fq&&(fq=(fp=fr)+fread(fr,1,1<<20,stdin))==fp?EOF:*fp++)
char fr[1<<21],*fp=fr,*fq=fr;
inline void read(int &res)
{
    res=0;char ch=gc();
    while(ch<'0'||ch>'9') ch=gc();
    while('0'<=ch&&ch<='9') res=(res<<1)+(res<<3)+(ch^48),ch=gc();
}

int T,n,m,s,a[210];

signed main()
{
	freopen("give.in","r",stdin);
	freopen("give.out","w",stdout);
    init();
    read(T); 
    while (T--)
    {
    	read(m);read(s);read(n);
    	int mx=0;
    	for (int i=1;i<=n;i++)
    		read(a[i]),mx=max(mx,a[i]);
    	ret.a.clear();ret.resize(mx+1);
    	for (int i=1;i<=n;i++)
    		ret.a[a[i]]=1;
    	ans.a.clear();
    	ans.resize(1);
    	ans.a[0]=1;
    	for (;m;m>>=1)
    	{
    		if (m&1) ans=(ans*ret).modx(s+1);
    		ret=(ret*ret).modx(s+1);
		}
		printf("%d\n",ans[s]&1); 
	}
    return 0;
}