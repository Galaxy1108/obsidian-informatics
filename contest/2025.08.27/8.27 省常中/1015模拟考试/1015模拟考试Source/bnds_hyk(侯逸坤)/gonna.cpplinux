#include<bits/stdc++.h>
using namespace std;
#define int long long
int n,mod;
bool not_p[3005];
int mi[3005][3005];
int jc[3005],ny[3005],fj[3005],f[2][3005];
int p[3005],cnt=0,ans=0;
void shai(int x){
	for(int i=2;i<=x;i++){
		if(!not_p[i]){
			p[++cnt]=i;
			for(int j=2;j<=x/i;j++) not_p[j*i]=1;
		}
	}
}
void add(int x){
	for(int i=1;i<=cnt;i++){
		if(x==1) break;
		while(x%p[i]==0){
			jc[i]++;
			x/=p[i];
		}
	}
}
void FJ(int x){
	memset(fj,0,sizeof fj);
	for(int i=1;i<=cnt;i++){
		if(x==1) break;
		while(x%p[i]==0){
			fj[i]++;
			x/=p[i];
		}
	}
}
int qkp(int x,int k){
	if(k==0) return 1;
	else if(k==1) return x;
	int tmp=qkp(x,k>>1);
	if(k&1) return ((tmp*tmp)%mod*x)%mod;
	else return (tmp*tmp)%mod;
}
signed main(){
	freopen("gonna.in","r",stdin);
	freopen("gonna.out","w",stdout);
	cin>>n>>mod;
	shai(n);
	ans=1;
	for(int i=1;i<=n;i++) ny[i]=qkp(i,mod-2);
	for(int i=2;i<=n;i++){
		FJ(i);
		for(int j=1;j<=cnt;j++){
			f[0][j]=f[1][j]+(i-1)*fj[j]-jc[j];
		}
		int now=1;
		for(int i=1;i<=cnt;i++){
			if(f[0][i]){
				now*=((qkp(p[i],f[0][i]+1)-1)*ny[p[i]-1])%mod;
				now%=mod;
			}
		}
		ans+=now;
		ans%=mod;
		for(int j=1;j<=cnt;j++){
			f[1][j]=f[0][j];
		}
		add(i);
	}
	cout<<ans;
	return 0;
}