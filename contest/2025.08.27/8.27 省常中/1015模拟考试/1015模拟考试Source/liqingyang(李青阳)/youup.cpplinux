#include<iostream>
#include<vector>
using namespace std;
const int mod=998244353;
inline int qpow(int a,int b)
{
	int ret=1;
	while(b)
	{
		if(b&1)
		{
			ret=(long long)
			ret*a%mod;
		}
		a=(long long)
		a*a%mod,b>>=1;
	}
	return ret;
}
int s[50010],inv[50010];
inline void init()
{
	s[0]=inv[0]=1;
	for(int i=1;i<=50000;i++)
	{
		s[i]=(long long)s[i-1]*i%mod;
		inv[i]=qpow(s[i],mod-2);
	}
}
inline int C(int n,int m)
{
	return n<m?0:(long long)s[n]*inv[m]%mod*inv[n-m]%mod;
}
int Num,n,m,l[25][25],ans[25];
vector<int> e[25];
void dfs(int now,int fa,int S)
{
	for(int i=0;i<e[now].size();i++)
	{
		int t=e[now][i];
		if(t==fa)
		{
			continue;
		}
		l[S][t]=l[S][now]+1;
		dfs(t,now,S);
	}
}
int main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	cin>>Num>>n>>m;
	if(Num==4)
	{
		init();
		if(m>=2)
		{
			for(int i=1;i<=n;i++)
			{
				cout<<C(n,i)<<" ";
			}
			cout<<endl;
			return 0;
		}
		if(m==1)
		{
			cout<<n<<" "<<n-1<<" ";
			for(int i=3;i<=n;i++)
			{
				cout<<0<<" ";
			}
			cout<<endl;
			return 0;
		}
		cout<<n<<" ";
		for(int i=2;i<=n;i++)
		{
			cout<<0<<" ";
		}
		cout<<endl;
		return 0;
	}
	if(Num==5)
	{
		init();
		for(int i=1;i<=n;i++)
		{
			cout<<(C(m,i)+(long long)C(m,i-1)*(n-m))%mod<<" ";
		}
		cout<<endl;
		return 0;
	}
	for(int i=1,x,y;i<n;i++)
	{
		cin>>x>>y;
		e[x].push_back(y);
		e[y].push_back(x);
	}
	for(int i=1;i<=n;i++)
	{
		dfs(i,i,i);
	}
	for(int i=0;i<(1<<n);i++)
	{
		bool flag=1;
		for(int j=0;j<n&&flag;j++)
		{
			if(i&(1<<j))
			{
				for(int k=j+1;k<n&&flag;k++)
				{
					flag&=(!(i&(1<<k))||l[j+1][k+1]<=m);
				}
			}
		}
		ans[__builtin_popcount(i)]+=flag;
	}
	for(int i=1;i<=n;i++)
	{
		cout<<ans[i]<<" ";
	}
	cout<<endl;
	return 0;
}