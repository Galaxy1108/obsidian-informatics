#include<bits/stdc++.h>
using namespace std;
const int N=3e3+5,mod=998244353;
int f[N],fact[N],ifact[N],dis[N][N],subtask,n,d,cnt;
vector <int> e[N];
int mul(int x,int y) {return 1ll*x*y%mod;}
int mul(int x,int y,int z) {return 1ll*x*y%mod*z%mod;}
//void dfs(int x,int dad,int dep)
//{
//	++cnt;
//	if (dep<d) for (int y:e[x])
//		if (y^dad) dfs(y,x,dep+1);
//}
void dfs(int x,int dad,int t,int S)
{
	dis[S][x]=t;
	for (int y:e[x]) if (y^dad) dfs(y,x,t+1,S);
}
int C(int x,int y) {return mul(fact[x],ifact[y],ifact[x-y]);}
int fastpow(int x,int y)
{
	int res=1;
	for (;y;y>>=1,x=mul(x,x))
		if (y&1) res=mul(res,x);
	return res;
}
int main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	scanf("%d%d%d",&subtask,&n,&d);
	for (int i=1,u,v;i<n;++i)
		scanf("%d%d",&u,&v),
		e[u].emplace_back(v),
		e[v].emplace_back(u);
	for (int i=1;i<=n;++i) fact[i]=mul(fact[i-1],i);
	ifact[n]=fastpow(fact[n],mod-2);
	for (int i=n;i;--i) ifact[i-1]=mul(ifact[i],i); 
	if (subtask==1)
	{
		for (int i=1;i<=n;++i)
			printf("%d ",(i==1)*n);
		return 0;
	}
	if (subtask==2)
	{
//		for (int i=1;i<=n;++i)
//			dfs(i,0,0,i);
//		for (int S=0;S<(1<<n);++S)
//		{
//			
//		}
	}
	if (subtask==4)
	{
		if (d==0)
		{
			for (int i=1;i<=n;++i)
				printf("%d ",(i==1)*n);
		}
		if (d==1)
		{
			for (int i=1;i<=n;++i)
			{
				if (i==1) printf("%d ",n);
				if (i>1) printf("%d ",C(n-1,i-1));
			}
		}
		if (d==2)
		{
			for (int i=1;i<=n;++i) printf("%d ",C(n,i));
		}
		return 0;
	}
	/*
	for (int i=C[0][0]=1;i<=n;++i)
		for (int j=C[i][0]=1;j<=i;++j)	
			C[i][j]=(C[i-1][j]+C[i-1][j-1])%mod;
	for (int i=1;i<=n;++i)
	{
		cnt=0,dfs(i,0,0);
		for (int j=1;j<=cnt;++j)
			f[j]=(f[j]+C[cnt-1][j-1]);
	}
	for (int i=1;i<=n;++i) printf("%lld ",1ll*f[i]*fastpow(i,mod-2)%mod);
	*/
}