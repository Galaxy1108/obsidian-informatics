#include<bits/stdc++.h>
using namespace std;
int n;
int pri[3010],tot;
int num[3010][3010],cnt[3010][3010],sum[3010];
int a[3010];
long long p,ans;
bool isp[3010];
long long read(){
	long long ans=0;
	char ch=getchar();
	while(!isdigit(ch)) ch=getchar();
	while(isdigit(ch)) ans=(ans<<3)+(ans<<1)+ch-48,ch=getchar();
	return ans;
}
void breakdown(const int n){
	for(int i=1,j=n;i<=tot&&j>1;){
		if(j%pri[i]) ++i;
		else{
			if(num[n][sum[n]]==pri[i]) ++cnt[n][sum[n]];
			else num[n][++sum[n]]=pri[i],cnt[n][sum[n]]=1;
			j/=pri[i];
		}
	}
	return;
}
void prework(const int n){
	for(int i=2;i<=n;++i) if(!isp[i]){
		pri[++tot]=i;
		for(int j=i;j<=n;j+=i) isp[j]=1;
	}
	for(int i=1;i<=n;++i) breakdown(i);
	return;
}
long long fastpow(const long long a,const long long b,const long long p){
	long long ans=1,base=a,t=b;
	while(t){
		if(t&1) ans=ans*base%p;
		t>>=1,base=base*base%p;
	}
	return ans;
}
//long long inv(const long long a){return fastpow(a,p-2,p);}
long long exgcd(const long long a,const long long b,long long &x,long long &y){
	if(!b){
		x=1,y=0;
		return a;
	}
	long long d=exgcd(b,a%b,x,y);
	long long t=x;
	x=y,y=t-a/b*x;
	return d;
}
long long inv(const long long a,const long long b){
	long long x,y;
	exgcd(a,b,x,y);
	return (x%b+b)%b;
}
int main(){
	freopen("never.in","r",stdin);
	freopen("never.out","w",stdout);
	n=read(),p=read();
	prework(n);
	for(int i=1;i<=n;++i){
		for(int j=1;j<=sum[i];++j) a[num[i][j]]+=i*cnt[i][j];
		for(int t=1;t<=i;++t) for(int j=1;j<=sum[t];++j) a[num[t][j]]-=cnt[t][j];
		ans=1;
		for(int j=2;j<=tot;++j){
			long long t;
			if(pri[j-1]%p==1) t=(a[j]+1)%p;
			else t=(fastpow(pri[j-1],a[j]+1,p)-1)*inv(pri[j-1]-1,p)%p;
			ans=ans*t%p;
		}
	}
	cout<<ans<<endl;
	return 0;
}