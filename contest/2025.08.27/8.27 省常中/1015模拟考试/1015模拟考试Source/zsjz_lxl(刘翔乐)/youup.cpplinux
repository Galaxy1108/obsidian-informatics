#if IN_LOCAL
import local;
#endif // IN_LOCAL
#include<iostream>
#include<forward_list>
using namespace std;
#if !IN_LOCAL
#include<fstream>
ifstream fin("youup.in", ifstream::binary);
ofstream fout("youup.out", ofstream::binary);
#define cin fin
#define cout fout
#endif // !IN_LOCAL
#define SC(a, b) static_cast<a>(b)
using ull = unsigned long long;
constexpr const unsigned mod = 998244353;
inline constexpr unsigned Power(unsigned a, unsigned b)
{
	unsigned ans = 1;
	for (; b; a = SC(ull, a) * a % mod, b /= 2)
	{
		if (b % 2)
		{
			ans = ans * SC(ull, a) % mod;
		}
	}
	return ans;
}
unsigned n, x, root, fac[300003], inv_fac[300003], dis[2002][2002], node[300003], ans[300003];
forward_list<unsigned> edg[300003];
inline void DFS1(const unsigned pos, const unsigned father, const unsigned depth)
{
	dis[root][pos] = depth;
	for (const unsigned i : edg[pos])
	{
		if (i != father)
		{
			DFS1(i, pos, depth + 1);
		}
	}
	return;
}
inline void DFS2(const unsigned step, const unsigned counter)
{
	if (step > n)
	{
		++ans[counter];
	}
	else
	{
		DFS2(step + 1, counter);
		{
			const auto& dis_step = dis[step];
			for (unsigned i = 1; i <= counter; ++i)
			{
				if (dis_step[node[i]] > x)
				{
					return;
				}
			}
		}
		node[counter + 1] = step;
		DFS2(step + 1, counter + 1);
	}
	return;
}
int main()
{
	fac[0] = 1;
	for (unsigned i = 1; i <= 300000; fac[i] = SC(ull, fac[i - 1]) * i % mod, ++i);
	inv_fac[300000] = Power(fac[300000], mod - 2);
	for (unsigned i = 300000; i; inv_fac[i - 1] = SC(ull, inv_fac[i]) * i % mod, --i);
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	unsigned num;
	cin >> num >> n >> x;
	cout << n;
	if (n == 1)
	{
		return 0;
	}
	if (x == 0)
	{
		for (unsigned i = 2; i <= n; cout << " 0", ++i);
		return 0;
	}
	if (num == 4)
	{
		if (x == 1)
		{
			cout << ' ' << (n - 1);
			for (unsigned i = 3; i <= n; cout << " 0", ++i);
		}
		else
		{
			for (unsigned i = 2; i <= n; ++i)
			{
				cout << ' ' << SC(unsigned, SC(ull, inv_fac[n - i]) * inv_fac[i] % mod * fac[n] % mod);
			}
		}
		return 0;
	}
	if (num == 5)
	{
		const unsigned xP1 = x + 1;
		for (unsigned i = 2; i <= xP1; ++i)
		{
			const unsigned iM1 = i - 1;
			unsigned ans = 0;
			for (unsigned j = n - iM1; j; --j)
			{
				const unsigned r = min(n, j + x);
				ans = (ans + SC(ull, fac[r - j]) * SC(ull, inv_fac[(r - j) - iM1])) % mod;
			}
			cout << ' ' << SC(unsigned, ans * SC(ull, inv_fac[iM1]) % mod);
		}
		for (unsigned i = xP1 + 1; i <= n; cout << " 0", ++i);
	}
	else
	{
		for (unsigned i = 1; i < n; ++i)
		{
			unsigned x, y;
			cin >> x >> y;
			edg[x].emplace_front(y);
			edg[y].emplace_front(x);
		}
		for (root = 1; root <= n; DFS1(root, 0, 0), ++root);
		DFS2(1, 0);
		for (unsigned i = 2; i <= n; cout << ' ' << ans[i++]);
	}
	return 0;
}