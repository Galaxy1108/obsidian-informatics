#include<cstdio>
#include<algorithm>
const int N=30,M=50010;
const long long MOD=998244353;
int d[N][N],ans[N];
long long fact[N],fact_inv[N];
inline long long ksm(long long b,long long p)
{
	long long ans=1;
	while(p)
	{
		if(p&1) ans=ans*b%MOD;
		p>>=1,b=b*b%MOD;
	}
	return ans;
}
inline long long inv(long long x){return ksm(x,MOD-2);}
inline long long C(int n,int m){return fact[n]*fact_inv[m]%MOD*fact_inv[n-m]%MOD;}
int main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	int T,n,x;
	scanf("%d%d%d",&T,&n,&x);
	if(T<=2)
	{
		for(int i=1;i<=n;++i)
			for(int j=1;j<=n;++j)
				d[i][j]=(i==j)?0:1000000;
		for(int i=1;i<n;++i)
		{
			int u,v;
			scanf("%d%d",&u,&v);
			d[u][v]=1,d[v][u]=1;
		}
		for(int k=1;k<=n;++k)
			for(int i=1;i<=n;++i)
				for(int j=1;j<=n;++j)
					d[i][j]=std::min(d[i][j],d[i][k]+d[k][j]);
		for(int p=0;p<(1<<n);++p)
		{
			int mx=0;
			for(int i=0;i<n;++i)
				if((p>>i)&1)
					for(int j=0;j<i;++j)
						if((p>>j)&1) mx=std::max(mx,d[i+1][j+1]);
			if(mx<=x) ++ans[__builtin_popcount(p)];
		}
		for(int i=1;i<=n;++i) printf("%d ",ans[i]);
	}
	if(T==4)
	{
		if(x==0)
		{
			for(int i=1;i<=n;++i)
				if(i==1) printf("%d ",n);
				else printf("0 ");
		}
		else if(x==1)
		{
			for(int i=1;i<=n;++i)
				if(i==1) printf("%d ",n);
				else if(i==2) printf("%d ",n-1);
				else printf("0 ");
		}
		else
		{
			fact[0]=1;
			for(int i=1;i<=n;++i) fact[i]=(fact[i-1]*i)%MOD;
			fact_inv[n]=inv(fact[n]);
			for(int i=n-1;i>=0;--i) fact_inv[i]=(fact_inv[i+1]*(i+1))%MOD;
			for(int i=1;i<=n;++i) printf("%lld ",C(n,i));
		}
	}
	return 0;
}