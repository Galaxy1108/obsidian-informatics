#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const int NUM=3005;
int read()
{
    int x=0,f=1;
    char c=getchar();
    while(c<'0'||c>'9')
	{
        if(c=='-') f=-1;
		c=getchar();
	}
    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-'0',c=getchar();
    return x*f;
}
int n,p,pre[NUM];
LL ans,result,prime[NUM];
LL ksm[23055][440];
int sum[NUM][440],cnt[440];
bool isprime[NUM];
void Euler_sieve(int n)
{
    memset(isprime,true,sizeof(isprime));
    prime[0]=0;
    for(int i=2;i<=n;i++)
    {
        if(isprime[i]) prime[++prime[0]]=i;
        for(int j=1;j<=prime[0]&&i*prime[j]<=n;j++)
		{
            isprime[i*prime[j]]=false;
            if(i%prime[j]==0) break;
        }
    }
}
void init()
{
    int x,c[NUM];
    Euler_sieve(n);
    for(int i=2;i<=n;i++)
    {
        x=i;
        for(int j=1;j<=prime[0];j++)
        {
            c[j]=0;
            while(x%prime[j]==0)
            {
                c[j]++;
                x/=prime[j];
            }
        }
        for(int j=1;j<=prime[0];j++) sum[i][j]=sum[i-1][j]+c[j];
    }
    for(int i=1;i<=prime[0];i++)
    {
        ksm[0][i]=1;
        for(int j=1;j<=23050;j++) ksm[j][i]=(ksm[j-1][i]*prime[i])%p;
        for(int j=1;j<=23050;j++) ksm[j][i]=(ksm[j][i]+ksm[j-1][i])%p;
    }
    prime[prime[0]+1]=n+1;
    for(int i=1;i<=prime[0];i++)
        for(int j=prime[i];j<prime[i+1];j++) pre[j]=i;
}
int main()
{
    freopen("gonna.in","r",stdin);
    freopen("gonna.out","w",stdout);
    // int time=clock();
    // int k=0;
    n=read(),p=read();
    init();
    // printf("%d\n",prime[0]);
    for(int h=1;h<=n;h++)
    {
        // memset(cnt,0,sizeof(cnt));
        for(int j=pre[h];j;j--) cnt[j]=0;
        for(int i=0;i<=h;i++)
        {
            for(int j=pre[h];j;j--) cnt[j]+=sum[h][j];
            for(int j=pre[i];j;j--) cnt[j]-=sum[i][j];
            for(int j=pre[h-i];j;j--) cnt[j]-=sum[h-i][j];
        }
        // for(int j=1;j<=prime[0];j++) k=max(k,cnt[j]);
        result=1;
        for(int j=pre[h];j;j--)
            result=(result*ksm[cnt[j]][j])%p;
        ans=(ans+result)%p;
    }
    // printf("%d\n",k);
    printf("%lld",ans);
    // printf("\n%d",clock()-time);
}