#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define l(x) x<<1
#define r(x) x<<1|1
#define mpr make_pair
const int SIZE = 200005;
const int mod = 998244353;
int n, m, tot;
int head[SIZE], ver[SIZE*2], nxt[SIZE*2];
int a[SIZE], totd;
int ans[SIZE];
int d[SIZE], f[SIZE][30];

inline int rd(){
	int f = 1, x = 0;
	char ch = getchar();
	while(ch < '0' || ch > '9'){
		if(ch == '-') f = -1;
		ch = getchar();
	}
	while(ch >= '0' && ch <= '9'){
		x = (x << 1) + (x << 3) + (ch ^ 48);
		ch = getchar();
	}
	return f*x;
}

void add(int x, int y){
	ver[++tot] = y, nxt[tot] = head[x];
	head[x] = tot;
}

void dfs(int x, int fa){
	f[x][0] = fa; d[x] = d[fa] + 1;
	for(int i = 1; i <= 25; i++){
		f[x][i] = f[f[x][i-1]][i-1];
	}
	for(int i = head[x]; i; i = nxt[i]){
		int y = ver[i];
		if(y == fa) continue;
		dfs(y, x);
	}
}

int LCA(int x, int y){
	if(d[x] < d[y]) swap(x, y);
	for(int i = 25; i >= 0; i--){
		if(d[f[x][i]] >= d[y]) x = f[x][i];
		if(x == y) return x;
	}	
	for(int i = 25; i >= 0; i--){
		if(f[x][i] != f[y][i]) x = f[x][i], y = f[y][i];
	}
	return f[x][0];
}

bool check(){
	bool ff = 1;
	for(int i = 1; i <= totd; i++){
		for(int j = i+1; j <= totd; j++){
			if(d[a[i]] + d[a[j]] - 2*d[LCA(a[i], a[j])] > m){
				ff = 0;
				break;
			}
		}
	}
	ans[totd] += ff;
	return ff;
}

void dfs1(int x){
	if(x > n) return;
	a[++totd] = x;
	if(check()){
		dfs1(x+1);
		totd--;	
		dfs1(x+1);	
	}
	else{
		totd--;
		dfs1(x+1);
	}
	return;
}

int main(){
	freopen("youup.in", "r", stdin);
	freopen("youup.out", "w", stdout);
	rd();
	n = rd(), m = rd();
	for(int i = 1; i < n; i++){
		int x = rd(), y = rd();
		add(x, y); add(y, x);
	}
	dfs(1, 0);
	dfs1(1);
	for(int i = 1; i <= n; i++){
		printf("%d ", ans[i]);
	}
	return 0;
}


