#include <stdio.h>
const int _(20004), $(2300);
int n, s[_][$], a[_], b[$], f[_], c, p; long long t[_][$], k(1);
inline int power(int x, int y)
{
    int z(1);
    while (y) {
        if (y & 1) z = 1ll * z * x % p;
        x = 1ll * x * x % p; y >>= 1;
    } return z;
}
int main()
{
    freopen("gonna.in", "r", stdin);
    freopen("gonna.out", "w", stdout);
    scanf("%d%d", &n, &p);
    for (int i(2); i <= n; ++i) if (!a[i]) { a[i] = i; b[f[i] = ++c] = i; for (int j(i << 1); j <= n; j += i) if (!a[j]) a[j] = i; }
    for (int i(2); i <= n; ++i)
    {
        int j(i);
        while (j > 1) { ++s[i][f[a[j]]]; j /= a[j]; }
        for (j = 1; j <= c; ++j) s[i][j] += s[i - 1][j];
        for (j = 1; j <= c; ++j) t[i][j] = t[i - 1][j] + 2 * s[i][j];
    }
    for (int i(2); i <= n; ++i)
    {
        long long d(1), e(1);
        for (int j(1); j <= c && b[j] <= i; ++j) {
            const int w(1ll * s[i][j] * (i + 1) - t[i][j]), q((power(b[j], w + 1) + p - 1) % p);
            d = d * q % p; e = e * (b[j] - 1) % p;
        } k = (k + d * power(e, p - 2)) % p;
    }
    printf("%lld\n", k);
    return 0;
}