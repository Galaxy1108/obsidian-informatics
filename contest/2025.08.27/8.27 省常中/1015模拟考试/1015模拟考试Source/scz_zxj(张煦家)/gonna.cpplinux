#include <bits/stdc++.h>
#define maxn 20010
#define maxp 2500
using namespace std;
static char buf[1 << 21], *p1 = buf, *p2 = buf, obuf[1 << 21], *O = obuf;
#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)
#define putchar(X) *O++ = (X)
template < typename T >
inline void read(T &X)
{
    X = 0; bool f = false; char ch = getchar();
    while (!isdigit(ch)) {f |= ch == '-'; ch = getchar();}
    while (isdigit(ch)) {X = (X * 10) + (ch ^ 48); ch = getchar();}
    X = f ? -X : X;
}
template < typename T >
inline void write(T X)
{
    if (X == 0) {putchar('0'); return;}
    if (X < 0) {putchar('-'); X = -X;}
    static int cnt = 0, num[21];
    while (X) {num[++cnt] = X % 10; X /= 10;}
    while (cnt) putchar(num[cnt--] ^ 48);
}
int n, p;
bitset < maxn > is_prime;
int prime[maxp], cnt;
int cntmem[maxn];
int jc[maxn][maxp];
void init()
{
    for (int i = 2; i <= n; ++i)
    {
        if (!is_prime[i]) prime[++cnt] = i;
        cntmem[i] = cnt;
        for (int j = 1; j <= cnt && i * prime[j] <= n; ++j)
        {
            is_prime[i * prime[j]] = true;
            if (i % prime[j] == 0) break;
        }
        int k = i;
        for (int j = 1; j <= cnt; ++j)
        {
            jc[i][j] = jc[i - 1][j];
            while (k % prime[j] == 0) k /= prime[j], ++jc[i][j];
        }
    }
    for (int i = 2; i <= n; ++i)
        for (int j = 1; j <= cntmem[i]; ++j)
            jc[i][j] += jc[i - 1][j];
}
int ans;
int main()
{
    freopen("gonna.in", "r", stdin);
    freopen("gonna.out", "w", stdout);
    read(n); read(p);
    init();
    for (int i = 1; i <= n; ++i)
    {
        int m = 1;
        for (int j = 1; j <= cntmem[i]; ++j)
        {
            int primenum = (jc[i][j] - jc[i - 1][j]) * (i + 1) - jc[i][j] * 2;
            int s = 1;
            for (int k = 1, mul = prime[j]; k <= primenum; ++k, mul = (1ll * mul * prime[j]) % p) s = (s + mul) % p;
            m = (1ll * m * s) % p;
        }
        ans = (ans + m) % p;
    }
    write(ans);
    fwrite(obuf,O - obuf, 1, stdout);
    fclose(stdin);
    fclose(stdout);
    return 0;
}