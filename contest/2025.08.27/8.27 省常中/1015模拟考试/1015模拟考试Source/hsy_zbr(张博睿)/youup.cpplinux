#include<bits/stdc++.h>
#include<vector>
using namespace std;
#define re register

inline int qread()
{
	int x=0,f=1;
	char c=getchar();
	while(!isdigit(c))
	{
		if(c=='-')f=-1;
		c=getchar();
	}
	while(isdigit(c))
	{
		x=x*10+(c^48);
		c=getchar();
	}
	return x*f;
}

const int N=3e5+10;
int n;
int DIS;
struct edge
{
	int to,nxt;
} e[N*2];
int tot,head[N];
inline void add(int a,int b)
{
	e[++tot].to=b;
	e[tot].nxt=head[a];
	head[a]=tot;
}

int fa[N],dep[N],dfn[N],top[N],siz[N],son[N];
int cnt=0;
inline void dfs1(int rt,int father)
{
	dep[rt]=dep[father]+1;
	son[rt]=-1;
	siz[rt]=1;
	for(int i=head[rt]; i; i=e[i].nxt)
	{
		int to=e[i].to;
		if(to==father)continue;
		fa[to]=rt;
		dfs1(to,rt);
		siz[rt]+=siz[to];
		if(son[rt]==-1||siz[son[rt]]<siz[to])son[rt]=to;
	}
}
inline void dfs2(int rt,int tp)
{
	dfn[rt]=++cnt;
	top[rt]=tp;
	if(son[rt]==-1)return ;
	dfs2(son[rt],tp);
	for(int i=head[rt]; i; i=e[i].nxt)
	{
		int to=e[i].to;
		if(to==son[rt]||to==fa[rt])continue;
		dfs2(to,to);
	}
}

inline int query(int a,int b)
{
	int res=0;
	while(top[a]!=top[b])
	{
		if(dep[top[a]]<dep[top[b]])swap(a,b);
		res+=dep[a]-dep[top[a]]+1;
		a=fa[top[a]];
	}
	if(dep[a]>dep[b])swap(a,b);
	res+=dep[b]-dep[a];
	return res;
}

int ans=0;
bool vis[N];
int pre[25][25];

inline void get_all(int stp,int tgt)
{
	if(stp>tgt)
	{
		ans++ ;
		return ;
	}
	for(re int i=1;i<=n;i++)
	{
		if(vis[i])continue;
		bool flg=1;
		for(re int j=1;j<=n;j++)
		{
			if(vis[j])
			{
				if( pre[i][j] > DIS )
				{
					flg=0;
					break;
				}
			}
		}
		if(!flg)continue;
		vis[i]=1;
		get_all(stp+1,tgt);
		vis[i]=0;
	}
}

signed main()
{
	freopen("youup.in","r",stdin);
	freopen("youup.out","w",stdout);
	int NUM=qread();
	n=qread();
	DIS=qread();
	for(re int i=1;i<n;i++)
	{
		int u=qread(),v=qread();
		add(u,v);
		add(v,u);
	}
	dfs1(1,0);
	dfs2(1,1);
	for(re int i=1;i<=n;i++)
	{
		for(re int j=1;j<=n;j++)
		{
			pre[i][j]=query(i,j);
		}
	}
	int cnt=1;
	for(re int k=1;k<=n;k++)
	{
		ans=0;
		get_all(1,k);
		cout<<ans/cnt<<" ";
		cnt*=(k+1);
	}
	return 0;
}
