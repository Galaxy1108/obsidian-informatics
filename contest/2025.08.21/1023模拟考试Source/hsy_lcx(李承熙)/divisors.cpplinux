#include<bits/stdc++.h>
using namespace std;
inline int qread()
{
	register int a=0,f=1;register char ch=getchar();
	while(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}
	while(ch>='0'&&ch<='9'){(a*=10)+=(ch^48);ch=getchar();}
	return a*f;
}
int n,ans=1,a[100010],tot,vis[100010],p;
struct qxx
{
	int f,t;
}e[200010];
inline void adde(register int x,register int y)
{
	e[++tot].t=y;
	e[tot].f=x;
	return ;
}
inline int lcm(register int x,register int y){return x*y/__gcd(x,y);}
int main()
{
	freopen("divisors.in","r",stdin);
	freopen("divisors.out","w",stdout);
	n=qread();
	for(register int i=1;i<=n;++i)a[i]=i; 
	a[1]=4*n;
	for(register int i=2;i<=n;++i)
	{
		if(!(a[1]%i))
		{
			adde(1,i);
			vis[i]=1;
		}
	}
	p=2;
	for(register int i=n;i>1;--i)
	{
		if(!vis[i])
		{
			p=1;
			while(lcm(a[p],i)>11000)
			{
				++p;
				while(!vis[p])++p;
			}
			if(p>n)continue;
			a[p]=lcm(a[p],i);
			for(register int j=min(a[p],n);j>1;--j)
			{
				if(!vis[j]&&!(a[p]%j))
				{
					adde(p,j);
					vis[j]=1;
				}
			}
		}
	}
	for(register int i=n;i>1;--i)
	{
		if(!vis[i])
		{
			p=1;
			while(lcm(a[p],i)>11000)
			{
				++p;
				while(!vis[p])++p;
			}
			if(p>n)continue;
			a[p]=lcm(a[p],i);
			for(register int j=min(a[p],n);j>1;--j)
			{
				if(!vis[j]&&!(a[p]%j))
				{
					adde(p,j);
					a[j]=j;
					vis[j]=1;
				}
			}
		}
	}
	for(register int i=1;i<=n;++i)
	{
		printf("%d ",a[i]);
	}
	puts("");
	for(register int i=1;i<=tot;++i)
	{
		printf("%d %d\n",e[i].f,e[i].t);
	}
	return 0;
}