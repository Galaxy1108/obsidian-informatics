#include <bits/stdc++.h>
using namespace std;
const int N(60),inf(0x3f3f3f3f);
int n,sum,maxi,mini,ans=inf,a[N],b[N];
bool vis[N],used[N];
pair<int,int> nxt[N]; 
vector<int> vec;
inline int read(){
	int FF=0,RR=1;
	char ch=getchar();
	for(;!isdigit(ch);ch=getchar())
		if(ch=='-')
			RR=-1;
	for(;isdigit(ch);ch=getchar())
		FF=(FF<<1)+(FF<<3)+ch-48;
	return FF*RR;
}
void dfs(int x){
	if(vis[x])
		return;
//	maxi=max(maxi,x),mini=min(mini,x);
	vis[x]=1;
	sum+=nxt[x].second;
	maxi=max(maxi,nxt[x].second);
	dfs(nxt[x].first);
} 
bool check(){
	for(int i=1;i<n;i++)
		if(b[i]==b[i+1])
			return 0;
	return 1;
}
void work(int dep){
	if(dep>n){
		memset(vis,0,sizeof(vis)); 
		int tot=0;
		for(int i=1;i<=n;i++)
			if(!vis[i]){
				sum=0,maxi=0;
				vec.clear();
				dfs(i);
				tot+=sum-maxi;
			}
		ans=min(ans,tot<<1);
		return;
	}
	for(int i=1;i<=n;i++)
		if(!used[i]&&a[i]==b[dep]){
			used[i]=1,nxt[i]=make_pair(dep,abs(i-dep));
			work(dep+1);
			used[i]=0;
		}
}
int main(){
	freopen("lineup.in","r",stdin);
	freopen("lineup.out","w",stdout);
	n=read();
	for(int i=1;i<=n;i++)
		b[i]=a[i]=read();
	sort(b+1,b+n+1);
	if(check()){
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				if(a[i]==b[j])
					nxt[i]=make_pair(j,abs(i-j));
//		for(int i=1;i<=n;i++)
//			cout<<nxt[i].first<<' ';
//		cout<<'\n';
		int ans=0;
		for(int i=1;i<=n;i++)
			if(!vis[i]){
				sum=0,maxi=0;
				dfs(i);
				ans+=sum-maxi;
			}
		printf("%d",ans<<1);
		return 0;
	}
	work(1);
	printf("%d",ans);
	return 0;
}
