#include <bits/stdc++.h>
using namespace std;

#define fo(i,a,b) for(int i=a;i<=b;++i)

int n;
int a[2505];
int b[2505];
int c[2505];

int check(int l) {
	c[1] = b[1], c[l] = b[l - 1];
	fo(i, 2, l - 1) {
		c[i] = b[i - 1] * b[i] / __gcd(b[i - 1], b[i]);
	}
	int mx = c[l];
	fo(i, 1, l - 1) {
		if(__gcd(c[i], c[i + 1]) != b[i]) {
			return -1;
		}
		mx = max(mx, c[i]);
	}
	return mx;
}

int main() {
	freopen("divisors.in", "r", stdin);
	freopen("divisors.out", "w", stdout);
	scanf("%d", &n);
	a[1] = 2, a[2] = 3;
	fo(i, 4, n) {
		int mm = 1e9, good;
		fo(j, 1, i - 1) {
			fo(k, 1, j - 1) b[k] = a[k];
			fo(k, j + 1, i - 1) b[k] = a[k - 1];
			b[j] = i;
			int tmp = check(i - 1);
			if(tmp == -1) continue;
			if(tmp < mm) {
				mm = tmp;
				good = j;
			}
		}
		if(mm == 1e9) {
			puts("NONONO");
			return 0;
		}
		int j = good;
		fo(k, 1, j - 1) b[k] = a[k];
		fo(k, j + 1, i - 1) b[k] = a[k - 1];
		b[j] = i;
		memcpy(a, b, sizeof(a));
//		fo(j, 1, i - 1) printf("%d ", a[j]);
//		puts("");
	}
	printf("%d ", a[1]);
	fo(i, 2, n - 1) {
		printf("%d ", a[i] * a[i - 1] / __gcd(a[i], a[i - 1]));
	}
	printf("%d\n", a[n - 1]);
	fo(i, 1, n - 1) printf("%d %d\n", i, i + 1);
	return 0;
}