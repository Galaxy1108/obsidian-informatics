#include <bits/stdc++.h>
using namespace std;

#define fo(i,a,b) for(int i=a;i<=b;++i)

int n;
int h[55], a[55];
int dis[55], rdis[55], from[55];
int mat[55], rmat[55];
int q[2505], head, tail;
int in[55];

bool bfs(int K) {
	memset(dis, 0x3f3f3f3f, sizeof(dis));
	memset(rdis, 0x3f3f3f3f, sizeof(rdis));
	memset(in, 0, sizeof(in));
	head = tail = 1;
	fo(i, 1, n) {
		if(mat[i] == 0) {
			q[tail++] = i;
			dis[i] = 0, in[i] = 1;
		}
	}
	while(head < tail) {
		int x = q[head];
		fo(i, x - K, x + K)
			if(i >= 1 && i <= n && i != mat[x] && h[x] == a[i]) {
				int w = abs(x - i);
				if(rmat[i] == 0) {
					if(rdis[i] > dis[x] + w) {
						rdis[i] = dis[x] + w;
						from[i] = x;
					}
				} else {
					if(dis[rmat[i]] > dis[x] + w - abs(rmat[i] - i)) {
						dis[rmat[i]] = dis[x] + w - abs(rmat[i] - i);
						from[i] = x;
						if(!in[rmat[i]]) {
							q[tail++] = rmat[i];
							in[rmat[i]] = 1;
						}
					}
				}
			}
		head++, in[x] = 0;
	}
	int x = -1;
	fo(i, 1, n)
		if(x == -1 || rdis[i] < rdis[x])
			x = i;
	if(rdis[x] >= 1e9) return 0;
	while(x) {
		int nxt = mat[from[x]];
		mat[from[x]] = x;
		rmat[x] = from[x];
		x = nxt;
	}
	return 1;
}

bool check(int x, int flag) {
	memset(mat, 0, sizeof(mat));
	memset(rmat, 0, sizeof(rmat));
	int res = 0;
	while(bfs(x))
		++res;
	if(flag) {
		int ans = 0;
		fo(i, 1, n)
			ans += abs(mat[i] - i);
		printf("%d\n", ans);
	}
	return res == n;
}

int main() {
	freopen("lineup.in", "r", stdin);
	freopen("lineup.out", "w", stdout);
	scanf("%d", &n);
	fo(i, 1, n) {
		scanf("%d", &h[i]);
		a[i] = h[i];
	}
	sort(a + 1, a + 1 + n);
	int l = 0, r = n, res = -1;
	while(l <= r) {
		int mid = (l + r) >> 1;
		if(check(mid, 0))
			r = mid - 1, res = mid;
		else
			l = mid + 1;
	}
	if(res == -1) {
		puts("NONONO");
		return 0;
	}
	check(res, 1);
	return 0;
}