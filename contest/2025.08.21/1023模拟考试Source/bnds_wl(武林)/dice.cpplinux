#include <cstdio>
#include <algorithm>

using namespace std;

int a[10005];
const int mod = 1e9 + 7;
int fac[10005], inv[10005];
int pw[5005][5005], sum[5005][5005], pr[5005], su[5005];
int qpow(int x, int y)
{
	int ans = 1;
	while(y)
	{
		if(y & 1)
			ans = 1ll * ans * x % mod;
		x = 1ll * x * x % mod;
		y >>= 1;
	}
	return ans;
}
int f(int x, int y)
{
	int t = 1ll * inv[x] * inv[y - x] % mod;
	return (((y - x) & 1) ? (mod - t) : t);
}
int s(int x, int k)
{
	if(x <= k + 1)
		return sum[x][k];
	int i, ans = 0, tmp;
	pr[0] = x;
	for(i = 1; i <= k + 1; i++)
		pr[i] = 1ll * pr[i - 1] * (x - i) % mod;
	su[k + 2] = 1;
	for(i = k + 1; i >= 1; i--)
		su[i] = 1ll * su[i + 1] * (x - i) % mod;
	for(i = 0; i <= k + 1; i++)
	{
		tmp = 1;
		if(i)
			tmp = pr[i - 1];
		tmp = 1ll * tmp * su[i + 1] % mod * f(i, k + 1) % mod;
		tmp = 1ll * tmp * sum[i][k] % mod;
		ans = (ans + tmp) % mod;
	}
	return ans;
}

int main()
{
	freopen("dice.in", "r", stdin);
	freopen("dice.out", "w", stdout);
	int n, i, j, ans = 0, tmp, prd = 1;
	scanf("%d", &n);
	for(i = 1; i <= n; i++)
		scanf("%d", a + i);
	fac[0] = 1;
	for(i = 1; i <= n + 5; i++)
		fac[i] = 1ll * fac[i - 1] * i % mod;
	inv[n + 5] = qpow(fac[n + 5], mod - 2);
	for(i = n + 5; i >= 1; i--)
		inv[i - 1] = 1ll * inv[i] * i % mod;
	for(i = 0; i <= n + 1; i++)
		pw[i][0] = 1;
	for(i = 0; i <= n + 1; i++)
		for(j = 1; j <= n + 1; j++)
			pw[i][j] = 1ll * pw[i][j - 1] * i % mod;
	for(j = 0; j <= n + 1; j++)
	{
		sum[0][j] = pw[0][j];
		for(i = 1; i <= n + 1; i++)
			sum[i][j] = (sum[i - 1][j] + pw[i][j]) % mod;
	}
	sort(a + 1, a + n + 1);
	for(i = 1; i <= n; prd = 1ll * prd * a[i++] % mod)
	{
		tmp = (s(a[i], n - i + 1) - s(a[i - 1], n - i + 1) + mod) % mod;
		ans = (ans + 1ll * tmp * prd % mod) % mod;
	}
	ans = 1ll * ans * qpow(prd, mod - 2) % mod;
	ans = (a[n] + 1 + mod - ans) % mod;
	printf("%d\n", ans);
	return 0;
}