#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <algorithm>

#define LOG(FMT...) fprintf(stderr, FMT)

using namespace std;

typedef long long LL;
constexpr int N = 5005;
constexpr int mod = 1e9 + 7;

int n, a[N], ma;
int rv[N], ra[N];
int s[N][N];
int res;

int inv(int x, int k = mod - 2) {
	int r = 1;
	while (k) {
		if (k & 1) r = x * (LL)r % mod;
		x = x * (LL)x % mod;
		k >>= 1;
	}
	return r;
}

int main() {
	freopen("dice.in", "r", stdin);
	freopen("dice.out", "w", stdout);
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", a + i);
		if (a[i] > ma) {
			ma = a[i];
		}
	}
	s[0][0] = 1;
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= i; ++j) {
			s[i][j] = (s[i - 1][j - 1] + j * (LL)s[i - 1][j]) % mod;
		}
	}
	for (int i = 1; i <= n + 1; ++i) {
		rv[i] = inv(i);
	}
	sort(a + 1, a + n + 1);
	for (int i = 1; i <= n; ++i) {
		ra[i] = inv(a[i]);
	}
	for (int k = 0; k < n; ++k) {
		int r = 1;
		for (int i = k + 1; i <= n; ++i) {
			r = r * (LL)ra[i] % mod;
		}
		int v = 0, t = 1;
		for (int i = 0; i <= n - k; ++i) {
			t = t * (LL)(a[k + 1] - i) % mod;
			v = (v + s[n - k][i] * (LL)t % mod * rv[i + 1]) % mod;
		}
		t = 1;
		for (int i = 0; i <= n - k; ++i) {
			t = t * (LL)(a[k] - i) % mod;
			v = (v - s[n - k][i] * (LL)t % mod * rv[i + 1]) % mod;
		}
		res = (res + a[k + 1] - a[k] - r * (LL)v) % mod;
	}
	if (res < 0) {
		res += mod;
	}
	printf("%d\n", res);
	return 0;
}