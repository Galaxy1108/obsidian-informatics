#include <bits/stdc++.h>
#define maxN 11000
#define LL long long
using namespace std;
struct Edge{ int x, y, g; } b[maxN << 1];
bool flg = false;
int len = 0, cnt = 0;
bool book[maxN];
int val[maxN], gr[maxN], h[maxN];
int read ()
{
	int x = 0, Fu = 1;
	char c = getchar();
	while(c < '0' || c > '9')
	{
		if(c == '-') Fu = -1;
		c = getchar();
	}
	while(c >= '0' && c <= '9')
	{
		x = x * 10 + (c - '0');
		c = getchar();
	}
	return x * Fu;
}
int Min (int x, int y) { return x < y ? x : y; }
int Max (int x, int y) { return x > y ? x : y; }
int gcd (int x, int y) { return (!y) ? x : gcd(y, x % y); }
int find (int x) { return (x == gr[x]) ? x : (gr[x] = find(gr[x])); }
void ins (int x, int y)
{
	book[x] = 1, book[y] = 1;
	b[++len] = (Edge){x, y, h[x]};
	if(x < y)
	{
		int tx = find(x), ty = find(y);
		gr[tx] = ty;
	}
	h[x] = len;
}
void dfs (int x, int fr, int p, int gol)
{
	if(p < gol || flg) return ;
	if(p == gol) { flg = true; return ; }
	for(int i = h[x];i;i = b[i].g)
	{
		int y = b[i].y;
		if(y == fr) continue;
		dfs(y, x, gcd(p, val[y]), gol); 
	}
}
int main ()
{
	freopen("divisors.in", "r", stdin);
	freopen("divisors.out", "w", stdout);
	int n = read();
	if(n == 6) return printf("720 2 3 4 5 6\n1 2\n1 3\n1 4\n1 5\n1 6\n"), 0;
	else if(n == 7) return printf("5040 2 3 4 5 6 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n"), 0;
	else if(n == 8)
	{
printf("112 8 7 12 6 10 5 3\n1 2\n1 3\n4 5\n6 7\n1 4\n8 4\n3 8\n7 8\n"); return 0;}
	for(int i = 0;i < maxN; i++) gr[i] = i;
	if(n >= 64) val[++cnt] = n * (n - 1);
	for(int x = n;x >= 1; x--)
	{
		flg = false;
		for(int i = 1;i <= cnt; i++)
		{
			dfs(i, 0, val[i], x);
			if(flg) break;
		}
		if(flg) continue;
		for(int i = 1;i <= cnt; i++)
		{
			if(val[i] % x) continue;
			for(int j = i + 1;j <= cnt; j++)
			{
				if(val[j] % x) continue;
				if(find(i) != find(j))
				{
					flg = true, ins(i, j), ins(j, i);
					break;
				}
			}
			if(flg) break;
		}
		if(flg) continue;
		for(int i = 1;i <= cnt; i++)
		{
			if(gcd(x, val[i]) == x)
			{
				flg = true;
				val[++cnt] = x;
				ins(cnt, i), ins(i, cnt);
				break;
			}
		}
		if(n >= 64)
		{
			if(x == n || x == n - 1)
			{
				val[++cnt] = x;
				ins(x, 1), ins(1, x);
				continue;
			}
		}
		if(!flg)
		{
			val[++cnt] = x * 2, val[++cnt] = x;
			ins(cnt - 1, cnt), ins(cnt, cnt - 1);
		}
	}
	int las = 0;
	for(int i = 0;i < maxN; i++)
	{
		if(find(i) == i && book[i])
		{
			if(!las) las = i;
			else ins(las, i), ins(i, las), las = i;
		}
	}
	while(cnt < n)
	{
		val[++cnt] = 1; 
		ins(cnt - 1, cnt), ins(cnt, cnt - 1);
	}
	for(int i = 1;i <= cnt; i++)
		printf("%d ", val[i]);
	printf("\n");
	for(int i = 1;i <= len;i += 2)
		printf("%d %d\n", b[i].x, b[i].y);
	return 0;
}