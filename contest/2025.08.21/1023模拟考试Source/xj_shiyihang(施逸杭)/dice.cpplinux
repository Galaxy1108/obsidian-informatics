#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define l(x) x<<1
#define r(x) x<<1|1
#define mpr make_pair
//mt19937_64 ra(time(0) ^ (*new char));
const ll SIZE = 5005;
const ll mod = 1e9+7;
ll n;
ll a[SIZE];
ll jc[SIZE], vjc[SIZE];
ll f[SIZE];

inline ll rd(){
	ll f = 1, x = 0;
	char ch = getchar();
	while(ch < '0' || ch > '9'){
		if(ch == '-') f = -1;
		ch = getchar();
	}
	while(ch >= '0' && ch <= '9'){
		x = (x << 1) + (x << 3) + (ch ^ 48);
		ch = getchar();
	}
	return f*x;
}

ll power(ll x, ll y){
	ll jl = 1;
	while(y){
		if(y & 1) jl = (jl * x) % mod;
		x = (x * x) % mod;
		y >>= 1;
	}
	return jl;
}

ll C(ll x, ll y){
	if(x < y) return 0;
	return ((jc[x] * vjc[x-y]) % mod * vjc[y]) % mod;
}

void solve1(){
	ll jl = 1, now = 1, ans = 0, z = 1;
	for(ll i = 1; i <= n; i++) z = (z * a[i]) % mod;
	for(ll i = 1; i <= a[n]; i++){
		while(i > a[now]){
			jl = (jl * a[now]) % mod;
			now++;
		}
		ll cc = (power(i, n-now+1) - power(i-1, n-now+1) + mod) % mod;
		ans = (ans + i * (jl * cc % mod) % mod) % mod;
	}
	printf("%lld", ans * power(z, mod-2) % mod);
}

void solve2(){
	ll z = 1, ans = 0;
	for(ll i = 1; i <= n; i++) z = (z * a[i]) % mod;
//	ll jl = a[n] % mod; f[0] = a[n]-1;
//	for(ll i = 1; i <= n; i++){
//		f[i] = power(i+1, mod-2); jl = (jl + power(a[n]-1, i+1)) % mod; ll now = (jl-1+mod)%mod;
////		cout << now << endl;
//		for(ll j = 0; j < i-1; j++){
//			now = (now - (C(i+1, j) * f[j] % mod) + mod) % mod;
//		}
////		cout << now << endl;
//		f[i] = (f[i] * now) % mod;
//		cout << f[i] << endl;
//	}
	for(ll i = 1; i < a[n]; i++){
		ans = (ans + power(i, n)) % mod;
	}
//	cout << f[n] << endl;
	ans = (power(a[n], n+1) - ans + mod) % mod;
	printf("%lld", ans * power(z, mod-2) % mod);
}

void solve3(){

}

int main(){
	freopen("dice.in", "r", stdin);
	freopen("dice.out", "w", stdout);
	n = rd();
	bool ff = 1;
	for(ll i = 1; i <= n; i++){
		a[i] = rd();
		if(a[i] != a[1]) ff = 0;
	}
	jc[0] = 1;
	for(ll i = 1; i <= n; i++) jc[i] = (jc[i-1] * i) % mod;
	vjc[n] = power(jc[n], mod-2);
	for(ll i = n-1; i >= 0; i--) vjc[i] = (vjc[i+1] * (i+1)) % mod;
//	cout << C(5, 0) << endl;
	sort(a+1, a+n+1);
//	solve2();
	if(a[n] <= 1e6) solve1();
	else if(ff) solve2();
	else solve1();
	return 0;
}
/*
10
10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000
746876188
5
3 3 3 3 3
*/