#include <bits/stdc++.h>
#define ru(i, l, r) for (int i = l; i <= r; i++)
#define rd(i, r, l) for (int i = r; i >= l; i--)
#define ll long long
#define maxn 5010
#define N 1e9
using namespace std;
const int mo = 1e9 + 7;
inline int read() {
	int x = 0; char ch = getchar();
	while(!isdigit(ch)) ch = getchar();
	while(isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();
	return x;
}
int n, a[maxn], ans = 0;
inline int qpow(int x, int step) {
	int res = 1;
	for (; step; step >>= 1) {
		if(step & 1) res = (ll)res * x % mo;
		x = (ll)x * x % mo;
	}
	return res;	
}
inline void upd(int &x, int y) {
	x += y; if(x >= mo) x -= mo;
}
int pw[maxn][maxn], ifac[maxn];
int pre[maxn], suf[maxn];
int solve(int x, int k) {
	int res = 0, tmp1 = 1, tmp2 = 1;
	pre[0] = suf[k + 3] = 1;
	ru(i, 1, k + 2) pre[i] = (ll)pre[i - 1] * (x + mo - i) % mo;
	rd(i, k + 2, 1) suf[i] = (ll)suf[i + 1] * (x + mo - i) % mo;
	ru(i, 1, k + 2) {
		int tmp = (ll)pw[i][k] * pre[i - 1] % mo * suf[i + 1] % mo;
		tmp = (ll)tmp * ifac[i - 1] % mo * ifac[k + 2 - i] % mo;
		if(((k + 2) - i) & 1) tmp = (mo - tmp) % mo;
		upd(res, tmp);
	}
	//ru(i, 1, k + 2) {
	//	int tmp = pw[i][k];
	//	ru(j, 1, k + 2) if(i ^ j) {
	//		tmp = (ll)tmp * (x + mo - j) % mo * qpow(i + mo - j, mo - 2) % mo; 
	//	}
	//	res = (res + tmp) % mo;
	//}
	return res;
}
int main() {
	freopen("dice.in", "r", stdin);
	freopen("dice.out", "w", stdout);
	ifac[0] = 1; ru(i, 1, maxn - 1) ifac[i] = (ll)ifac[i - 1] * qpow(i, mo - 2) % mo;
	n = read();
	ru(i, 1, n) a[i] = read();
	sort(a + 1, a + n + 1);
	ru(i, 1, n + 2) {
		pw[i][0] = 1;
		ru(j, 1, n) pw[i][j] = (ll)pw[i][j - 1] * i % mo;
	}
	ru(i, 1, n + 2) ru(j, 0, n) upd(pw[i][j], pw[i - 1][j]);
	a[n + 1] = N;
	int pro = 1;
	ru(i, 1, n + 1) {
		int res = (mo + solve(a[i], n - i + 1) - solve(a[i - 1], n - i + 1)) % mo;
		res = (ll)res * pro % mo;
		ans = (ans + res) % mo;
		pro = (ll)pro * a[i] % mo;
	}
	int tmp = 1;
	ru(i, 1, n) tmp = (ll)tmp * a[i] % mo;
	ans = (ll)ans * qpow(tmp, mo - 2) % mo;
	printf("%d\n", ((int)N + 1 + mo - ans) % mo);
	return 0;
}