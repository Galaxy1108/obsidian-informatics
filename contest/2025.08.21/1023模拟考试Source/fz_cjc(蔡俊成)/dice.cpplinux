#include <cstdio>
#include <cstring>
#include <cctype>
#include <vector>
#include <algorithm>
#define int long long
using namespace std;
inline int read (void) {
    int x = 0, f = 1, ch = getchar();
    while(!isdigit(ch)) { if(ch == '-') f = -f; ch = getchar(); }
    while(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }
    return x * f;
}
const int N=5005,mod=1e9+7,o=5002;
int n,m,a[N],Inv=1,ans,pre=1;
int fac[N],ifac[N],inv[N],f[N][N],p[N],q[N];
int ksm(int n,int m){
    int s=1;
    while(m){
        if(m&1) s=s*n%mod;
        n=n*n%mod;
        m>>=1;
    }
    return s;
}
int ask(int n,int k){
    if(n<=k+2) return f[n][k];
    p[0]=q[k+3]=1;
    for (int i=1;i<=k+2;i++) p[i]=p[i-1]*(n-i)%mod;
    for (int i=k+2;i>=1;i--) q[i]=q[i+1]*(n-i)%mod;
    int s=0;
    for (int i=1;i<=k+2;i++){
        int w=1;
        if((k+2-i)&1) w=-1;
        s=(s+p[i-1]*q[i+1]%mod*f[i][k]%mod*ifac[i-1]%mod*ifac[k+2-i]%mod*w+mod)%mod;
    }
    return s;
}
int cal(int l,int r,int k){
    if(l==0) return ask(r,k);
    return ask(r,k)-ask(l-1,k);
}
void solve(){
    fac[0]=1;
    for (int i=1;i<=o;i++) fac[i]=fac[i-1]*i%mod;
    ifac[o]=ksm(fac[o],mod-2);
    for (int i=o;i>=1;i--) ifac[i-1]=ifac[i]*i%mod;
    // printf("%d\n",ifac[2]);
    for (int i=1;i<=o;i++){
        int s=1;
        for (int j=1;j<=o;j++){
            s=s*i%mod;
            f[i][j]=(f[i][j]+s)%mod;
        }
    }
    for (int i=1;i<=o;i++){
        for (int j=1;j<=o;j++) f[i][j]=(f[i][j]+f[i-1][j])%mod;
    }
}
signed main (void) {
    freopen("dice.in", "r", stdin);
    freopen("dice.out", "w", stdout);
    n=read();
    for (int i=1;i<=n;i++) {
        a[i]=read();m=max(m,a[i]);
        Inv=Inv*ksm(a[i],mod-2)%mod;
    }
    sort(a+1,a+n+1);
    solve();
    int las=-1;
    for (int i=1;i<=n;i++){
        //las+1~a[i]
        ans=(ans+cal(las+1,a[i],n-i+1)*pre)%mod;las=a[i];
        pre=pre*a[i]%mod;
    }
    printf("%lld\n",((m+1)*(mod+1)%mod+mod-ans*Inv%mod)%mod);
    return 0;
}