#include<bits/stdc++.h>
using namespace std;
const int MX=55;
vector<pair<int,int > > g[MX];
int h[MX],t[MX];
bool vis[MX],zh[MX],rvis[MX],tmpp[MX];
int ret=0x3f3f3f3f,n=0,ans=0;
void dfs(int s,int x,int maxn,int sum){
	if(zh[x]){
		if(s==x)ret=0;
		//cout<<"fail"<<endl;
		return;
	}
	//cout<<x<<' ';
	for(int i=0;i<g[x].size();i++){
		int to=g[x][i].first,c=g[x][i].second;
		if(to!=s&&!rvis[to]&&!vis[to]){
			vis[to]=true;
			dfs(s,to,max(maxn,c),sum+c);
			vis[to]=false;
		}
		else if(to==s){
			int tmp=sum+c-max(maxn,c);
			if(tmp<ret){
				ret=tmp;
				for(int j=1;j<=n;j++)tmpp[j]=vis[j];
			}
		}
	}
}
int main(){
	freopen("lineup.in","r",stdin);
	freopen("lineup.out","w",stdout);
	cin>>n;
	for(int i=1;i<=n;i++)cin>>h[i];
	for(int i=1;i<=n;i++)t[i]=h[i];
	sort(t+1,t+1+n);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			if(t[j]==h[i]){
				g[i].push_back(make_pair(j,int(abs(j-i))));
				if(i==j)zh[i]=true;
			}
	for(int i=1;i<=n;i++){
		if(!rvis[i]){
			rvis[i]=vis[i]=true;
			ret=0x3f3f3f3f;
			dfs(i,i,0,0);
			ans+=ret;
			if(ret==0x3f3f3f3f)cout<<i<<endl;
			for(int j=1;j<=n;j++)rvis[j]|=tmpp[j];
		//	cout<<ret<<endl;
		}
	}
	cout<<ans*2<<endl;
	return 0;
}