#include<bits/stdc++.h>
using namespace std;
#define int long long
inline int qread()
{
	int x=0,f=1;
	char c=getchar();
	while(!isdigit(c))
	{
		if(c=='-')f=-1;
		c=getchar();
	}
	while(isdigit(c))
	{
		x=x*10+(c^48);
		c=getchar();
	}
	return x*f;
}
#define re register

const int mod=1e9+7;

inline int qpow(int base,int o)
{
	int res=1;
	int tmp=base%mod;
	while(o)
	{
		if(o&1)res=(res%mod*tmp%mod)%mod;
		tmp=(tmp%mod*tmp%mod)%mod;
		o>>=1;
	}
	return res%mod;
}

const int N=5000+10;
const int M=1e6+10;
int n;
int a[N];
int b[N];
int MX;
int MI;
int p=1;
int pdct[N];
int pre[M];

signed main()
{
	freopen("dice.in","r",stdin);
	freopen("dice.out","w",stdout);
	n=qread();
	for(re int i=1;i<=n;i++)
	{
		a[i]=qread();
		b[i]=a[i];
		if(i==1)MI=a[i];
		MI=min(MI,a[i]);
		p=(p%mod*a[i]%mod)%mod;
		MX=max(MX,a[i]);
	}
	stable_sort(b+1,b+1+n);
	pdct[1]=b[1];
	for(re int i=2;i<=n;i++)
	{
		pdct[i]=(pdct[i-1]*b[i])%mod;
	}
	for(int k=1;k<=MX;k++)
	{
		if(k<=MI)
		{
			pre[k]=qpow(k,n)%mod;
		}
		else
		{
			int pos=lower_bound(b+1,b+1+n,k)-b;
			pre[k]=( qpow(k,n-pos+1)%mod * pdct[pos-1]%mod )%mod;
		}
	}
	int ans=0;
	for(int k=1;k<=MX;k++)
	{
		int res1=1,res2=1;
		res1=pre[k]%mod;
		res2=pre[k-1]%mod;
		ans=(ans+k%mod*( res1%mod - res2%mod    ))%mod;
		ans%=mod;
	}
	ans%=mod;
	p%=mod;
	int tmp=(  qpow(p,mod-2)  )%mod;
	cout<<(ans%mod*tmp%mod)%mod<<endl;
	return 0; 
}
/*
*/
