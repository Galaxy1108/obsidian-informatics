#include <bits/stdc++.h>
#define FOR(i,j,k) for(int i=j; i<=k; ++i)
#define ROF(i,j,k) for(int i=j; i>=k; --i)
inline int read (void) {
  int x = 0, f = 1, ch = getchar();
  while(!isdigit(ch)) { if(ch == '-') f = -f; ch = getchar(); }
  while(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }
  return x * f;
}
using ll = long long;
const int maxn = 45;
const int mod = 998244353;
inline int ksm (int a, int b) {
  int c = 1;
  while(b) {
    if(b&1) c = 1ll * c * a % mod;
    a = 1ll * a * a % mod; b >>= 1;
  } return c;
}
int n, m, ans[maxn][2], bit[65], pw[65], f[maxn][2];
ll l[maxn], r[maxn], a[maxn], b[maxn];
void dfs (int x, int y) {
  int M = m >> 1, tot = 1;
  FOR(i,1,x-1) b[i] = a[i];
  ROF(i,m-1,M) {
    bit[i] = 0; f[x][0] = tot = 1;
    ROF(j,x-1,1)
      f[j][0] = (b[j] + 1) % mod * f[j+1][0] % mod;
    FOR(j,1,x-1) {
      if(b[j]>>i&1) {
        ans[x-1][y] = (ans[x-1][y] + 1ll * tot * pw[i-M] % mod * f[j+1][0]) % mod;
        b[j] ^= 1ll << i; bit[i] ^= 1;
      }
      tot = (b[j] + 1) % mod * tot % mod;
    }
  }
  ROF(i,M-1,0) {
    bit[i] = f[x][1] = 0; f[x][0] = tot = 1;
    ROF(j,x-1,1) if(b[j]>>i&1) {
      f[j][0] = ((b[j] + 1 - (1ll << i)) % mod * f[j+1][1] + (1ll << i) % mod * f[j+1][0]) % mod;
      f[j][1] = ((b[j] + 1 - (1ll << i)) % mod * f[j+1][0] + (1ll << i) % mod * f[j+1][1]) % mod;
    } else {
      f[j][0] = (b[j] + 1) % mod * f[j+1][0] % mod;
      f[j][1] = (b[j] + 1) % mod * f[j+1][1] % mod;
    }
    FOR(j,1,x-1) {
      if(b[j]>>i&1) {
        ans[x-1][y] = (ans[x-1][y] + 1ll * tot * f[j+1][bit[m-i-1]^bit[i]]) % mod;
        b[j] ^= 1ll << i; bit[i] ^= 1;
      }
      tot = (b[j] + 1) % mod * tot % mod;
    }
    if(bit[i] != bit[m-i-1]) break;
    if(i == 0) ans[x-1][y] = (ans[x-1][y] + 1) % mod;
  }
  if(x <= n) {
    a[x] = r[x];
    dfs (x+1, y);
    if(l[x]) {
      a[x] = l[x] - 1;
      dfs (x+1, y^1);
    }
  }
}
int main (void) {
  freopen("far.in", "r", stdin);
  freopen("far.out", "w", stdout);
  pw[0] = 1; FOR(i,1,60) pw[i] = 2ll * pw[i-1] % mod;
  scanf("%d %d", &n, &m);
  FOR(i,1,n) scanf("%lld %lld", &l[i], &r[i]);
  dfs (1, 0);
  FOR(i,1,n) printf("%d\n", (ans[i][0] - ans[i][1] + mod) % mod);
  return 0;
}