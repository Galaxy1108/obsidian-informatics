#include <bits/stdc++.h>
#define FOR(i,j,k) for(int i=j; i<=k; ++i)
#define ROF(i,j,k) for(int i=j; i>=k; --i)
inline int read (void) {
  int x = 0, f = 1, ch = getchar();
  while(!isdigit(ch)) { if(ch == '-') f = -f; ch = getchar(); }
  while(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }
  return x * f;
}
const int maxn = 5005;
const int mod = 1000000007;
inline int ksm (int a, int b) {
  int c = 1;
  while(b) {
    if(b&1) c = 1ll * c * a % mod;
    a = 1ll * a * a % mod; b >>= 1;
  } return c;
}
int a[maxn], s[maxn][maxn], fac[maxn], inv[maxn];
struct Binom {
  int lstn, lstm, lstres;
  inline int binom (int n, int m) {
    if(m < 0 || n < m) return 0;
    if(n != lstn || lstm > m) {
      lstn = n; lstm = 0; lstres = 1;
    }
    while(lstm < m)
      lstres = 1ll * lstres * (n - ++ lstm + 1) % mod;
    return 1ll * lstres * inv[m] % mod;
  }
} b[4];
int main (void) {
  freopen("dice.in", "r", stdin);
  freopen("dice.out", "w", stdout);
  int n = read(), ans = 0;
  FOR(i,1,n) a[i] = read();
  s[0][0] = fac[0] = 1;
  FOR(i,1,n+3) fac[i] = 1ll * fac[i-1] * i % mod;
  inv[n+3] = ksm(fac[n+3], mod-2); ROF(i,n+3,1) inv[i-1] = 1ll * inv[i] * i % mod;
  FOR(i,1,n+1) FOR(j,1,i) s[i][j] = (s[i-1][j-1] + 1ll * j * s[i-1][j]) % mod;
  std::sort(a+1, a+n+1);
  ROF(i,n,1) {
    int f = 1, k = n - i + 1, l = a[i-1] + 1, r = a[i];
    FOR(j,1,i-1) f = 1ll * f * a[j] % mod; b[0].lstn = b[1].lstn = b[2].lstn = b[3].lstn = -1;
    FOR(j,0,k+1) ans = (ans + 1ll * f * s[k+1][j] % mod * fac[j] % mod * (b[0].binom(r+1, j+1) - b[1].binom (l, j+1) + mod) + 1ll * (mod - f) * s[k][j] % mod * fac[j+1] % mod * (b[2].binom(r+1, j+2) - b[3].binom (l, j+2))) % mod;
  }
  int mul = 1;
  FOR(i,1,n) mul = 1ll * mul * a[i] % mod;
  printf("%lld\n", 1ll * ans * ksm (mul, mod-2) % mod);
  return 0;
}