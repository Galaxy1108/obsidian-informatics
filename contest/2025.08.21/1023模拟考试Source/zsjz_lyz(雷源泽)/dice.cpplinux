#include <cstdio>
#include <iostream>
#include <algorithm>
#define IN inline
using namespace std;

template <typename T>
IN void read(T &x) {
	x = 0; char ch = getchar(); int f = 0;
	for(; !isdigit(ch); f = (ch == '-' ? 1 : f), ch = getchar());
	for(; isdigit(ch); x = (x<<3)+(x<<1)+(ch^48), ch = getchar());
	if (f) x = ~x + 1;
}

typedef long long LL;
const int N = 5010, P = 1e9 + 7;
int n, a[N], F[N][N];
LL spr[N], fac[N], ifac[N];

IN void Add(int &x, int y){((x += y) >= P) && (x -= P);}
IN int fpow(int x, int y) {
	x = (x + P) % P;
	int s = 1;
	for(; y; y >>= 1, x = (LL)x * x % P) if (y & 1) s = (LL)s * x % P;
	return s;
}
LL pre[N], suf[N];
IN int calc(int n, int k) {
	if (n <= 0) return 0;
	if (n == 1) return 1;
	pre[0] = 1, suf[k + 3] = 1;
	for(int i = 1; i <= k + 2; i++) pre[i] = pre[i - 1] * (n - i + P) % P;
	for(int i = k + 2; i; i--) suf[i] = suf[i + 1] * (n - i + P) % P;
	int ans = 0, x, y = 0;
	for(int i = 1; i <= k + 2; i++)
		x = ifac[i - 1] * ifac[k + 2 - i] % P * ((k - i) & 1 ? P - 1 : 1) % P,
		Add(y, F[i][k]), Add(ans, pre[i - 1] * suf[i + 1] % P * x % P * y % P);
	return ans;
}

IN void Init() {
	read(n);
	for(int i = 1; i <= n; i++) read(a[i]);
	sort(a + 1, a + n + 1), spr[0] = 1;
	for(int i = 1; i <= n; i++) spr[i] = spr[i - 1] * a[i] % P;
	fac[0] = ifac[0] = 1;
	for(int i = 1; i <= n + 5; i++) fac[i] = fac[i - 1] * i % P;
	ifac[n + 5] = fpow(fac[n + 5], P - 2);
	for(int i = n + 4; i; i--) ifac[i] = ifac[i + 1] * (i + 1) % P;
	F[0][0] = 1;
	for(int i = 1; i <= n + 5; i++) {
		F[i][0] = 1;
		for(int j = 1; j <= n + 5; j++) F[i][j] = (LL)F[i][j - 1] * i % P;
	}
}

int main() {
	freopen("dice.in", "r", stdin);
	freopen("dice.out", "w", stdout);
	Init();
	int ans = 0;
	for(int i = n, j; i; i = j - 1) {
		j = i;
		while (j > 1 && a[j - 1] == a[i]) --j;
		int l = a[j - 1] + 1, r = a[j], m = n - j + 1;
		int z1, z2, z3;
		z1 = calc(r, m + 1), Add(z1, P - calc(l - 1, m + 1));
		z2 = calc(r - 1, m + 1), Add(z2, P - calc(l - 2, m + 1));
		z3 = calc(r - 1, m), Add(z3, P - calc(l - 2, m));
		int z = 0; Add(z, z1), Add(z, P - z2), Add(z, P - z3);
		Add(ans, spr[j - 1] * z % P);
	}
	printf("%d\n", (LL)ans * fpow(spr[n], P - 2) % P);
}