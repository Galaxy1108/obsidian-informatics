#include<iostream>
using namespace std;
const int mod=998244353;
struct tree
{
	long long sum;
	int maxx;
};
tree a[800000];
inline void update(int p)
{
	a[p].sum=a[p<<1].sum+a[(p<<1)+1].sum;
	a[p].maxx=max(a[p<<1].maxx,a[(p<<1)+1].maxx);
}
void change(int l,int r,int x,int y,int p)
{
	if(l==r)
	{
		a[p].sum=a[p].maxx=y;
		return;
	}
	int mid=l+r>>1;
	x<=mid?change(l,mid,x,y,p<<1)
	:change(mid+1,r,x,y,(p<<1)+1);
	update(p);
}
int query(int l,int r,int k,int p)
{
	if(l==r)
	{
		return l;
	}
	int mid=l+r>>1;
	long long suml=a[p<<1].sum;
	return suml>=k?query(l,mid,k,p<<1)
	:query(mid+1,r,k-suml,(p<<1)+1);
}
inline int add(int x,int y)
{
	x+=y;
	return x<mod?x:x-mod;
}
int type,n,q,A[200010],v[200010];
inline int solve()
{
	static int sta[200010];
	int head=0,sum=0;
	long long ret=0;
	while(a[1].maxx>sum)
	{
		int p=sta[++head]=query(1,n,a[1].maxx-sum,1);
		change(1,n,p,0,1),sum+=A[p],ret+=v[p];
	}
	for(int i=1;i<=head;i++)
	{
		change(1,n,sta[i],A[sta[i]],1);
	}
	return ret%mod;
}
int main()
{
	freopen("imperishable.in","r",stdin);
	freopen("imperishable.out","w",stdout);
	ios::sync_with_stdio(false);
	cin>>type>>n;
	v[0]=1;
	for(int i=1;i<=n;i++)
	{
		cin>>A[i];
		change(1,n,i,A[i],1);
		v[i]=add(v[i-1],v[i-1]);
	}
	cout<<solve()<<endl;
	cin>>q;
	while(q--)
	{
		int x,y;
		cin>>x>>y;
		change(1,n,x,A[x]=y,1);
		cout<<solve()<<endl;
	}
	return 0;
}