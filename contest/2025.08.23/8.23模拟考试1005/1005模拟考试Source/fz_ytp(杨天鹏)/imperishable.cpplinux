#include<bits/stdc++.h>
using namespace std;
inline int read(){
    int ans=0,a=getchar();
    while('0'>a||a>'9')a=getchar();
    while('0'<=a&&a<='9')ans=ans*10+a-'0',a=getchar();
    return ans;
}
const int mod=998244353;
int pw[200005];
int f[200005],n,q,Num,Maxm=200000;
int pos[200005],tree[800005],t1[800005];
int ask[200005],num[200005],a[400005],sum[200005];
inline void up(int now){
    tree[now]=max(tree[now<<1],tree[now<<1|1]);
    t1[now]=1e9;
    if(t1[now<<1]>=0)t1[now]=min(t1[now],t1[now<<1]);
    if(t1[now<<1|1]>=0)t1[now]=min(t1[now],t1[now<<1|1]);
}
void build(int now,int l,int r){
    if(l==r){
        t1[now]=tree[now]=pos[l];
        return ;
    }
    int mid=l+r>>1;
    build(now<<1,l,mid);
    build(now<<1|1,mid+1,r);
    up(now);
}
void change(int now,int l,int r,int p){
    if(l==r){
        t1[now]=tree[now]=pos[l];
        return ;
    }
    int mid=l+r>>1;
    if(mid>=p)change(now<<1,l,mid,p);
    else change(now<<1|1,mid+1,r,p);
    up(now);
}
int get(int now,int l,int r,int l1,int r1){
    if(l1>r1)return 0;
    if(l>=l1&&r<=r1)return tree[now];
    int mid=l+r>>1,ans=0;
    if(mid>=l1)ans=max(ans,get(now<<1,l,mid,l1,r1));
    if(mid+1<=r1)ans=max(ans,get(now<<1|1,mid+1,r,l1,r1));
    return ans;
}
int Min(int now,int l,int r,int l1,int r1){
    if(l1>r1)return 1e9;
    if(l>=l1&&r<=r1)return t1[now];
    int mid=l+r>>1,ans=1e9;
    if(mid>=l1)ans=min(ans,Min(now<<1,l,mid,l1,r1));
    if(mid+1<=r1)ans=min(ans,Min(now<<1|1,mid+1,r,l1,r1));
    return ans;
}
inline int lb(int now){
    return now&(-now);
}
inline void add(int now,int x){
    now++;
    for(int i=now;i<=Maxm+1;i+=lb(i))f[i]=f[i]+=x;
}
inline int find(int now){
    int ans=0;
    now++;
    while(now){
        ans+=f[now];
        now-=lb(now);
    }
    return ans;
}
void solve(){
    int l=1,r=Maxm;
    while(l<=r){
        int mid=l+r>>1;
        //cout<<mid<<" "<<find(mid)<<" "<<get(1,1,Maxm,mid+1,Maxm)<<endl;
        if(find(mid)>=get(1,1,n,mid+1,Maxm))r=mid-1;
        else l=mid+1;
    }
    if(r==Maxm){
        printf("%d\n",pw[Maxm]);
        return ;
    }
    r++;
    int x=get(1,1,Maxm,r+1,Maxm);
    int ans=sum[r],tmp=find(r);
    for(int i=r;i>=1;i--){
        if(tmp-pos[i]>=x){
            ans=(ans-pw[i])%mod;
            tmp-=pos[i];
        }
        if(q>10000)if(tmp-x<Min(1,1,n,1,r-1))break;
    }
    printf("%d\n",(ans+mod)%mod);
}
int main(){
    freopen("imperishable.in","r",stdin);
    freopen("imperishable.out","w",stdout);
    memset(t1,-1,sizeof(t1));
    pw[0]=1;
    for(int i=1;i<=200000;i++)pw[i]=pw[i-1]*2%mod;
    Num=read(),n=read();
    for(int i=1;i<=n;i++)pos[i]=read(),add(i,pos[i]);
    q=read();
    for(int i=1;i<=q;i++)ask[i]=read(),num[i]=read();
    Maxm=n;
    build(1,1,Maxm);
    for(int i=1;i<=Maxm;i++)sum[i]=(sum[i-1]+pw[i])%mod;
    solve();
    for(int i=1;i<=q;i++){
        add(ask[i],num[i]-pos[ask[i]]);
        pos[ask[i]]=num[i];
        change(1,1,n,ask[i]);
        solve();
    }
}