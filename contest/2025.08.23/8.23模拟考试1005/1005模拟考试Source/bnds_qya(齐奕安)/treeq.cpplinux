#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
const int N=1e7+5;
inline int read();
int n,fa[N],siz[N],f[N],ans;
vector<int> G[N];
struct edge{
	int u,v,w;
	edge(int u0=0,int v0=0,int w0=0){
		u=u0,v=v0,w=w0;
	}
} e[N];
void dfs(int u){
	siz[u]=1;
	for (int i=0;i<G[u].size();i++){
		int v=G[u][i];
		if (v!=fa[u]){
			fa[v]=u;
			dfs(v);
			siz[u]+=siz[v];
		}
	}
	return;
}
signed main(){
	scanf("%d",&n);
	for (int i=1;i<n;i++){
		int u=read(),v=read(),w=read();
		e[i]=(edge){u,v,w};
		G[u].push_back(v);
		G[v].push_back(u);
	}
	dfs(1);
	for (int i=1;i<n;i++){
		long long maxa=0ll;
		for (int j=1;j<=n;j++)
			maxa=max(maxa,1ll*(siz[j]-1)*e[i].w);
		for (int j=1;j<=n;j++)
			if (1ll*(siz[j]-1)*e[i].w==maxa)
				f[i]++;
	}
	for (int i=1;i<n;i++)
		ans^=f[i];
	printf("%d",ans);
	return 0;
}
inline int read(){
	int res=0;
	char ch=getchar();
	while (ch<'0' || ch>'9')
		ch=getchar();
	while ('0'<=ch && ch<='9'){
		res=(res<<1)+(res<<3)+(ch^48);
		ch=getchar();
	}
	return res;
}