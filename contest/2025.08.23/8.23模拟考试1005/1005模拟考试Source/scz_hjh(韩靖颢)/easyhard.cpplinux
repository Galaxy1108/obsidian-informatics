#include <bits/stdc++.h>
#define int long long
using namespace std;

template < typename T >
inline const void read(register T &x)
{
	register bool flg = x = 0;
	register char c;
	while ((c = getchar()) < 48 || c > 57)
		flg |= c == '-';
	do
		x = (x << 1) + (x << 3) + (c ^ 48);
	while ((c = getchar()) > 47 && c < 58);
	if (flg) x = -x;
}

int OUTPUT[45];

template < typename T >
inline const void write(register T x)
{
	if (x < 0)
	{
		putchar('-');
		x = -x;
	}
	register int len = 0;
	do
	{
		OUTPUT[++len] = x % 10 | 48;
		x /= 10;
	}while (x);
	while (len)
		putchar(OUTPUT[len--]);
}

template < typename T >
inline const void writesp(const register T x)
{
	write(x);
	putchar(32);
}

template < typename T >
inline const void writeln(const register T x)
{
	write(x);
	putchar(10);
}

const int N = 3005;
int n, m, p, ans, f[2][N], g[2][N];

signed main()
{
	freopen("easyhard.in", "r", stdin);
	freopen("easyhard.out", "w", stdout);
	read(n);
	read(m);
	read(p);
	for (register int i = 1; i <= n; ++i)
		f[0][i] = 1;
	g[0][0] = 1;
	int sig = 0;
	for (register int i = 1; i <= m; ++i)
	{
		sig ^= 1;
		for (register int j = 0; j <= n; ++j)
			f[sig][j] = g[sig][j] = 0;
		for (register int j = 0; j <= n; ++j)
		{
			if (j)
			{
				f[sig][j] = (f[sig][j] + f[sig ^ 1][j - 1]) % p;
				g[sig][j] = (g[sig][j] + g[sig ^ 1][j - 1] + g[sig ^ 1][j]) % p;
				if (j == 1) g[sig][j] = (g[sig][j] + f[sig ^ 1][j]) % p;
				else f[sig][j] = (f[sig][j] + f[sig ^ 1][j]) % p;
			}
			if (j < n)
			{
				g[sig][j] = (g[sig][j] + g[sig ^ 1][j + 1] + g[sig ^ 1][j]) % p;
				if (j) f[sig][j] = (f[sig][j] + f[sig ^ 1][j + 1] + f[sig ^ 1][j]) % p;
				else g[sig][j] = (g[sig][j] + f[sig ^ 1][j + 1]) % p;
			}
		}
	}
	for (register int i = 0; i <= n; ++i)
		ans = (ans + g[sig][i]) % p;
	writeln(ans);
	return 0;
}
