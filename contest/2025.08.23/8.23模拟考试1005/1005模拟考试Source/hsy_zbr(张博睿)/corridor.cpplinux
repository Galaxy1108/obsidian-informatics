#include<bits/stdc++.h>
#include<set>
using namespace std;
inline int read()
{
	int x=0,f=1;char c=getchar();
	while(!isdigit(c))
	{
		if(c=='-')f=-1;
		c=getchar();
	}
	while(isdigit(c))
	{
		x=x*10+(c^48);
		c=getchar();
	}
	return x*f;
}

const int N=150000+10;
set<int , less<int> > x[N];
set<int , less<int> > y[N];
int type,n,m,k;

inline void work(int sx,int sy,int q)
{
	int nowx=sx,nowy=sy;
	int to;
	if(sx==0)to=1;
	if(sy==0)to=2;
	bool off=0;
	for(int o=1;o<=q;o++)
	{
		if(to==1)
		{
			set<int>::iterator it=y[nowy].upper_bound(nowx);
			nowx= * it;
			to=2;
			if(it==y[nowy].end())
			{
				off=1;
				break;
			}
			
		}
		else if(to==2)
		{
			set<int>::iterator it=x[nowx].upper_bound(nowy);
			nowy= *it;
			to=1;
			if(it==x[nowx].end())
			{
				off=1;
				break;
			}
		}
	}
	if(off)
	{
		if(to==2)
		{
			cout<<n+1<<" "<<nowy<<endl;
		}
		else if(to==1)
		{
			cout<<nowx<<" "<<m+1<<endl;
		}
	}
	else
	{
		cout<<nowx<<" "<<nowy<<endl;
	}
}
signed main()
{
	freopen("corridor.in" , "r",stdin);
	freopen("corridor.out" , "w",stdout);
	ios::sync_with_stdio(false);
	type=read();n=read();m=read();k=read();
	for(int i=1;i<=k;i++)
	{
		int xi=read(),yi=read();
		x[xi].insert(yi);
		y[yi].insert(xi);
	}
	int Q=read();
	while(Q--)
	{
		int w=read();
		if(w==1)
		{
			int xi=read(),yi=read();
			x[xi].insert(yi);
			y[yi].insert(xi);
		}
		else if(w==2)
		{
			int sx=read(),sy=read(),q=read();
			work(sx,sy,q);
		}
	}
	
	return 0;
}
