#include<cstdio>
#include<algorithm>
#define ll long long
using namespace std;
void read(int &res)
{
	res=0;char ch=getchar();
	while(ch<'0'||ch>'9') ch=getchar();
	while('0'<=ch&&ch<='9') res=(res<<1)+(res<<3)+(ch^48),ch=getchar();
}
const int N=2e5,inf=1e6+100,mod=998244353;
int n,q,a[N+10],s[N+10],Pow[N+10],sp[N+10];
void Mod(int &a){if(a>=mod) a-=mod;}
struct trees
{
	int t[N<<2|1];
	#define ls (p<<1)
	#define rs (p<<1|1)
	#define mid (l+r>>1)
	void update(int x,int k,int p=1,int l=1,int r=n)
	{
		if(l==r)
		{
			t[p]=k;
			return;
		}
		if(x<=mid) update(x,k,ls,l,mid);
		else update(x,k,rs,mid+1,r);
		t[p]=t[ls]+t[rs];if(t[p]>inf) t[p]=inf;
	}
	int query(int L,int R,int p=1,int l=1,int r=n)
	{
		if(L>R) return 0;
		if(L<=l&&r<=R) return t[p];
		int res=0;
		if(L<=mid) res+=query(L,R,ls,l,mid);
		if(R>mid) res+=query(L,R,rs,mid+1,r);
		if(res>inf) res=inf;
		return res;
	}
	int Query(int res,int p=1,int l=1,int r=n)
	{
		if(l==r) return l;
		if(res<=t[ls]) return Query(res,ls,l,mid);
		return Query(res-t[ls],rs,mid+1,r);
	}
	#undef ls
	#undef rs
	#undef mid
}t1;
struct treemin
{
	int t[N<<2|1];
	#define ls (p<<1)
	#define rs (p<<1|1)
	#define mid (l+r>>1)
	void update(int x,int k,int p=1,int l=1,int r=n)
	{
		if(l==r)
		{
			t[p]=k;
			return;
		}
		if(x<=mid) update(x,k,ls,l,mid);
		else update(x,k,rs,mid+1,r);
		t[p]=max(t[ls],t[rs]);
	}
	int query(int L,int R,int p=1,int l=1,int r=n)
	{
		if(L>R) return 0;
		if(L<=l&&r<=R) return t[p];
		int res=0;
		if(L<=mid) res=max(res,query(L,R,ls,l,mid));
		if(R>mid) res=max(res,query(L,R,rs,mid+1,r));
		return res;
	}
	#undef ls
	#undef rs
	#undef mid
}t2;
int query()
{
	int l=1,r=n,mid,res=1,ans=0;
	while(l<=r)
	{
		mid=l+r>>1;
		if(t1.query(1,mid)>=t2.query(mid+1,n)) res=mid,r=mid-1;
		else l=mid+1;
	}
	ans+=Pow[res],Mod(ans);int tmp=t2.query(res+1,n)-a[res];
	while(tmp>0)
	{
		res=t1.Query(tmp);
		if(t1.query(1,res)==tmp)
		{
			ans+=sp[res],Mod(ans);
			break;
		}
		ans+=Pow[res],Mod(ans),tmp-=a[res];
	}
	return ans;
}
int main()
{
	freopen("imperishable.in","r",stdin);
	freopen("imperishable.out","w",stdout);
	read(n),read(n);
	Pow[0]=1;for(int i=1;i<=n;i++) Pow[i]=Pow[i-1]<<1,Mod(Pow[i]),sp[i]=sp[i-1]+Pow[i],Mod(sp[i]);
	for(int i=1;i<=n;i++) read(a[i]),t1.update(i,a[i]),t2.update(i,a[i]);
	printf("%d\n",query());
	read(q);
	for(int x,y;q--;)
	{
		read(x),read(y),a[x]=y,t1.update(x,a[x]),t2.update(x,a[x]);
		printf("%d\n",query());
	}
	return 0;
}