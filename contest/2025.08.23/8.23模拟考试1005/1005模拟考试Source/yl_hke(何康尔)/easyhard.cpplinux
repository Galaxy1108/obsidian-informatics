#include <bits/stdc++.h>
using namespace std;

const int MAXN = 3000 + 5;

long long f[MAXN][MAXN][2];
int n, m, p;

int main() {
    freopen("easyhard.in", "r", stdin);
    freopen("easyhard.out", "w", stdout);

    scanf("%d%d%d", &n, &m, &p);
    f[0][0][1] = 1;
    for(int k = 1; k <= n; k++) {
        f[0][k][0] = 1;
    }
    for(int k = 0; k < m; k++) {
        for(int i = 0; i <= n; i++) {
            if(i >= 1) {
                if(i == 1) {
                    f[k + 1][i - 1][1] = (f[k + 1][i - 1][1] + f[k][i][0]) % p;
                } else {
                    f[k + 1][i - 1][0] = (f[k + 1][i - 1][0] + f[k][i][0]) % p;
                }
                f[k + 1][i - 1][1] = (f[k + 1][i - 1][1] + f[k][i][1]) % p;
                if(i == 1)  {
                    f[k + 1][i][1] = (f[k + 1][i][1] + f[k][i][0]) % p;
                } else {
                    f[k + 1][i][0] = (f[k + 1][i][0] + f[k][i][0]) % p;
                }
                f[k + 1][i][1] = (f[k + 1][i][1] + f[k][i][1]) % p;
            }
            if(i <= n - 1) {
                f[k + 1][i + 1][0] = (f[k + 1][i + 1][0] + f[k][i][0]) % p;
                f[k + 1][i + 1][1] = (f[k + 1][i + 1][1] + f[k][i][1]) % p;
                f[k + 1][i][0] = (f[k + 1][i][0] + f[k][i][0]) % p;
                f[k + 1][i][1] = (f[k + 1][i][1] + f[k][i][1]) % p;
            }
        }
    }
    long long ans = 0;
    for(int k = 0; k <= n; k++) {
        ans = (ans + f[m][k][1]) % p;
    }
    printf("%lld\n", ans);

    return 0;
}
