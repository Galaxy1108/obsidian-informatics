#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
int read()
{
	char x=getchar();int v=0,bj=1;
	while((x!='-')&&(x<'0'||x>'9'))x=getchar();
	if(x=='-')
	{
		bj=-1;
		x=getchar();
	}
	while(!(x<'0'||x>'9'))
	v=(v<<1)+(v<<3)+x-'0',x=getchar();
	return v*bj;
}
const int mo=998244353,N=2*1e5+5;
int tre[N*8],num,n;
long long two[N],tw[N],tree[N*8],a[N];
void build(int num,int l,int r)
{
	if(l==r)
	{
		tree[num]=tre[num]=a[l];
	}else
	{
		int mid=(l+r)>>1;
		build(num<<1,l,mid);
		build((num<<1)|1,mid+1,r);
		tree[num]=tree[num<<1]+tree[(num<<1)|1];
		tre[num]=max(tre[num<<1],tre[(num<<1)|1]);
	}
}
void modify(int num,int l,int r,int x,int v)
{
	if(l==r)tree[num]=v,tre[num]=v;
	else
	{
		int mid=(l+r)>>1;
		if(x<=mid)modify(num<<1,l,mid,x,v);
		else modify((num<<1)|1,mid+1,r,x,v);
		tree[num]=tree[num<<1]+tree[(num<<1)|1];
		tre[num]=max(tre[num<<1],tre[(num<<1)|1]);
	}
}
long long query_sum(int num,int l,int r,int x,int y)
{
	if (l==x&&r==y)return tree[num];
	else
	{
		int mid=(l+r)>>1;
		if(y<=mid)return query_sum(num<<1,l,mid,x,y);
		else if(x>mid)return query_sum((num<<1)|1,mid+1,r,x,y);
		else return query_sum(num<<1,l,mid,x,mid)+query_sum((num<<1)|1,mid+1,r,mid+1,y);
		tree[num]=tree[num<<1]+tree[(num<<1)|1];
		tre[num]=max(tre[num<<1],tre[(num<<1)|1]);
	}
}
int query_max(int num,int l,int r,int x,int y)
{
	if (l==x&&r==y)return tre[num];
	else
	{
		int mid=(l+r)>>1;
		if(y<=mid)return query_max(num<<1,l,mid,x,y);
		else if(x>mid)return query_max((num<<1)|1,mid+1,r,x,y);
		else return max(query_max(num<<1,l,mid,x,mid),query_max((num<<1)|1,mid+1,r,mid+1,y));
		tree[num]=tree[num<<1]+tree[(num<<1)|1];
		tre[num]=max(tre[num<<1],tre[(num<<1)|1]);
	}
}
void doit()
{
	long long ans=0,l=1,r=n,i=0,mid,sum,ma;
	while(l<=r)
	{
		mid=(l+r)>>1,sum=query_sum(1,1,n,1,mid),ma=query_max(1,1,n,mid+1,n);
		if(sum>=ma)r=mid-1,i=mid;
		else l=mid+1;
	}
	ans=tw[i];sum=query_sum(1,1,n,1,i),ma=query_max(1,1,n,i+1,n);
	for(int j=i;j;j--)
	{
		if(sum-a[j]>=ma)sum-=a[j],ans=(ans-two[j]+mo)%mo;
		if(sum==ma)break;
	}
	printf("%lld\n",ans);
}
int main()
{
	freopen("imperishable.in","r",stdin);
	freopen("imperishable.out","w",stdout);
	num=read(),n=read();two[0]=1;
	for(int i=1;i<=n;i++)
	{
		a[i]=read();
		two[i]=(two[i-1]<<1)%mo;
		tw[i]=(tw[i-1]+two[i])%mo;
	}
	build(1,1,n);
	doit();
	int q=read();
	while(q--)
	{
		int s=read(),t=read();
		a[s]=t;
		modify(1,1,n,s,t);
		doit();
	}
}