#include<iostream>
#include<fstream>
using namespace std;
typedef long long ll;
const int maxn = 200005;
const ll mod = 998244353;
ll s[maxn], pow2[maxn];
int a[maxn];
int num[maxn<<2], nid[maxn<<2];
void pushup(int rt)
{
    if(num[rt<<1] >= num[rt<<1|1]) num[rt] = num[rt<<1], nid[rt] = nid[rt<<1];
    else num[rt] = num[rt<<1|1], nid[rt] = nid[rt<<1|1];
}
void build(int rt, int l, int r)
{
    if(l == r)
    {
        nid[rt] = l;
        num[rt] = a[l];
        return;
    }
    int mid = (l+r)>>1;
    build(rt<<1, l, mid);
    build(rt<<1|1, mid+1, r);
    pushup(rt);
}
void update(int rt, int l, int r, int L, int C)
{
    if(l == r)
    {
        num[rt] = C;
        return;
    }
    int mid = (l+r)>>1;
    if(L <= mid) update(rt<<1, l, mid, L, C);
    else update(rt<<1|1, mid+1, r, L, C);
    pushup(rt);
}
struct node {
    int n, id;
    bool operator>(const node o) const
    {
        if(n == o.n) return id < o.id;
        return n > o.n;
    }
    bool operator<(const node o) const
    {
        if(n == o.n) return id > o.id;
        return n < o.n;
    }
};
node query(int rt, int l, int r, int L, int R)
{
    if(L <= l && r <= R)
    {
        return {num[rt],nid[rt]};
    }
    int mid = (l+r)>>1;
    node ret = {0, 0};
    if(L <= mid) ret = query(rt<<1, l, mid, L, R);
    if(R > mid) ret = max(ret, query(rt<<1|1, mid+1, r, L, R));
    return ret;
}
inline int lowbit(int i)
{
    return i&-i;
}
int n;
ll solve()
{
    node no = query(1, 1, n, 1, n);
    ll sum = 0, id = no.id;
    for(int i = id-1; i > 0; i -= lowbit(i)) sum += s[i];
    if(sum < a[id])
    {
        return pow2[id];
    }
    int cnt = 0, i;
    ll ret = 0;
    for(i = 1; i < id && cnt < a[id]; i++)
    {
        ret = (ret+pow2[i])%mod;
        cnt += a[i];
    }
    for(i--; i >= 1; i--)
    {
        if(cnt-a[i] >= a[id]) cnt -= a[i], ret = (ret-pow2[i])%mod;
    }
    return (ret+mod)%mod;
}
int main()
{
    ifstream cin("imperishable.in");
    ofstream cout("imperishable.out");
    ios::sync_with_stdio(false);
    int q;
    cin >> n >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];
    cin >> q;
    int mx = 0, id;
    // for(int i = 1; i <= n; i++) if(a[i] > mx) mx = a[i], id = i;
    for(int i = 1; i <= n; i++)
    {
        int j = i-lowbit(i)+1;
        while(j <= i) s[i] += a[j++];
    }
    build(1, 1, n);
    pow2[0] = 1;
    for(int i = 1; i <= n; i++) pow2[i] = pow2[i-1]*2%mod;
    cout << solve() << endl;
    while(q--)
    {
        int x, y;
        cin >> x >> y;
        for(int i = x; i <= n; i += lowbit(i)) s[i] += y-a[x];
        a[x] = y;
        update(1, 1, n, x, y);
        cout << solve() << endl;
    }
    return 0;
}