#include<bits/stdc++.h>
using namespace std;
struct edge{
	int id,v,w;
};
vector<edge> e[5555]; 
int wt[5555];
vector<int> past[5555][5555];
int dep[5555],a[5555][5555];
int fa[5555],vis[5555];
int vis2[5555][5555];
int f[5555];
int n;
void bl(int u){
	if(vis[u]) return;
	vis[u]=1;
	int v;
	for(int i=0;i<e[u].size();i++){
		v=e[u][i].v;
		dep[v]=dep[u]+1;
		fa[v]=u;
		bl(v);
	}
}
void dfs(int i,int j){
	if(vis2[i][j]) return; 
	vis2[i][j]=1;
	if(i==j) return;
	if(dep[i]>dep[j]){
		for(int k=0;k<e[i].size();k++){
			if(e[i][k].v==fa[i]){
				past[e[i][k].id][j].push_back(i);
				past[e[i][k].id][i].push_back(j);
				dfs(fa[i],j);
				break;
			}
		} 
	}
	else if(dep[i]<dep[j]){
		for(int k=0;k<e[j].size();k++){
			if(e[j][k].v==fa[j]){
				past[e[j][k].id][i].push_back(j);
				past[e[j][k].id][j].push_back(i);
				dfs(i,fa[j]);
				break;
			}
		}
	}
	else{
		for(int k=0;k<e[i].size();k++){
			if(e[i][k].v==fa[i]){
				past[e[i][k].id][i].push_back(j);
				past[e[i][k].id][j].push_back(i);
				break;
			}
		}
		for(int k=0;k<e[j].size();k++){
			if(e[j][k].v==fa[j]){
				past[e[j][k].id][i].push_back(j);
				past[e[j][k].id][j].push_back(i);
				dfs(fa[i],fa[j]);
				break;
			}
		}		
	}
}
int main(){
	freopen("treeq.in","r",stdin);
	freopen("treeq.out","w",stdout);
	scanf("%d",&n);
	int u,v,w;
	edge x;
	for(int i=1;i<n;i++){
		scanf("%d%d%d",&u,&v,&w);
		wt[i]=w;
		x.v=v,x.w=w,x.id=i; 
		e[u].push_back(x);
		x.v=u,x.w=w,x.id=i;
		e[v].push_back(x);
	}
	dep[1]=0;
	bl(1);
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			dfs(i,j);
		}
	}
	for(int i=1;i<n;i++){
		for(int j=1;j<=n;j++){
			a[i][j]=past[i][j].size()*wt[i];
		}
	}
	vector<int> good;
	int ans=0;
	for(int i=1;i<=n;i++){
		good.clear();
		ans=0;
		for(int j=1;j<n;j++){
			if(a[j][i]>ans){
				good.clear();
				ans=a[j][i];
				good.push_back(j);
			}
		}
		for(int i=0;i<good.size();i++){
			f[good[i]]++;
		}
	}
	for(int i=1;i<n;i++) cout<<f[i]<<endl;
	return 0;
}