#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <algorithm>

#define LOG(FMT...) fprintf(stderr, FMT)

using namespace std;

typedef long long LL;
const int N = 10000005, M = 20000005;
const LL INF = 0x3f3f3f3f3f3f3f3fll;

int n, m;
int h[N], e[M], ne[M], w[M], idx;
int fa[N], sz[N], p[N];
LL f[N], g[N], vf[N], vg[N];
int c[N], cg[N], res[N];

char buf[1 << 21], *p1 = buf, *p2 = buf;
#define gc() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? -1 : *p1++)
int read() {
	int x = 0; char c = gc();
	while (c < 48 || c > 57) c = gc();
	for (; c > 47 && c < 58; c = gc()) x = x * 10 + (c ^ 48);
	return x;
}

void add(int x, int y, int c) {
	e[++idx] = y, w[idx] = c, ne[idx] = h[x], h[x] = idx;
}

void dfs1(int x) {
	sz[x] = 1;
	for (int i = h[x]; i; i = ne[i]) {
		int y = e[i];
		if (y == fa[x]) {
			continue;
		}
		fa[y] = x, dfs1(y), sz[x] += sz[y];
		LL t = max(f[y], sz[y] * (LL)w[i]);
		if (t > f[x]) {
			f[x] = t, p[x] = y;
		}
	}
}

void dfs2(int x) {
	if (p[x] && p[x] != fa[x]) {
		int y = p[x];
		for (int j = h[x], z; j; j = ne[j]) {
			z = e[j];
			if (z != y && z != fa[x]) {
				g[y] = max(g[y], max(f[z], sz[z] * (LL)w[j]));
			}
		}
		for (int i = h[x]; i; i = ne[i]) {
			if (e[i] == y) {
				g[y] = max(g[y], max(g[x], (n - sz[y]) * (LL)w[i]));
			}
		}
		if (g[y] > f[y]) {
			p[y] = x;
			f[y] = g[y];
		}
		dfs2(y);
	}
	for (int i = h[x]; i; i = ne[i]) {
		int y = e[i];
		if (y == fa[x] || y == p[x]) {
			continue;
		}
		g[y] = max(f[x], (n - sz[y]) * (LL)w[i]);
		// LOG("g[%d] = %lld\n", y, g[y]);
		if (g[y] > f[y]) {
			p[y] = x;
			f[y] = g[y];
		}
		dfs2(y);
	}
}

void dfs3(int x) {
	vf[x] = f[x];
	c[x] = 1;
	for (int i = h[x]; i; i = ne[i]) {
		int y = e[i];
		if (y == fa[x]) {
			continue;
		}
		dfs3(y);
		if ((n - sz[y]) * (LL)w[i] == vf[y]) {
			res[i - 1 >> 1] += c[y];
		}
		if (vf[y] < vf[x]) {
			p[x] = y;
			vf[x] = vf[y];
			c[x] = c[y];
		} else if (vf[y] == vf[x]) {
			c[x] += c[y];
		}
	}
}

void dfs4(int x) {
	if (p[x] && p[x] != fa[x]) {
		int y = p[x], i;
		for (i = h[x]; i; i = ne[i]) {
			if (e[i] == y) {
				break;
			}
		}
		LL vy;
		int cy;
		// LOG("%d -> %d, vy = %lld, cy = %d\n", x, y, vy, cy);
		vy = vg[x], cy = cg[x];
		for (int j = h[x], z; j; j = ne[j]) {
			z = e[j];
			if (z == y || z == fa[x]) {
				continue;
			}
			if (vf[z] < vy) {
				vy = vf[z];
				cy = c[z];
			} else if (vf[z] == vy) {
				cy += c[z];
			}
		}
		if (vy == sz[y] * (LL)w[i]) {
			res[i - 1 >> 1] += cy;
		}
		if (vy < vf[y]) {
			vf[y] = vy;
			c[y] = cy;
			p[y] = x;
		} else if (vy == vf[y]) {
			c[y] += cy;
		}
		if (f[y] < vy) {
			vy = f[y];
			cy = 1;
		} else if (f[y] == vy) {
			cy += 1;
		}
		vg[y] = vy;
		cg[y] = cy;
		dfs4(y);
	}
	for (int i = h[x]; i; i = ne[i]) {
		int y = e[i];
		if (y == fa[x] || y == p[x]) {
			continue;
		}
		LL vy = vf[x];
		int cy = c[x];
		if (vf[y] == vy) {
			cy -= c[y];
		}
		// LOG("%d -> %d, vy = %lld, cy = %d\n", x, y, vy, cy);
		if (vy == sz[y] * (LL)w[i]) {
			res[i - 1 >> 1] += cy;
		}
		if (vy < vf[y]) {
			vf[y] = vy;
			c[y] = cy;
			p[y] = x;
		} else if (vy == vf[y]) {
			c[y] += cy;
		}
		if (f[y] < vy) {
			vy = f[y];
			cy = 1;
		} else if (f[y] == vy) {
			cy += 1;
		}
		vg[y] = vy;
		cg[y] = cy;
		dfs4(y);
	}
}

int main() {
	// LOG("%.3lf\n", sizeof h * 21ll / 1048576.0);
	freopen("treeq.in", "r", stdin);
	freopen("treeq.out", "w", stdout);
	n = read();
	// LOG("%d\n", n);
	for (int i = 1; i < n; ++i) {
		int x = read(), y = read(), c = read();
		add(x, y, c), add(y, x, c);
	}
	dfs1(1);
	dfs2(1);
	/* for (int x = 1; x <= n; ++x) {
		LOG("%lld ", f[x]);
	}
	LOG("\n"); */
	memset(p, 0, n + 2 << 2);
	dfs3(1);
	/* for (int x = 1; x <= n; ++x) {
		LOG("%lld ", vf[x]);
	}
	LOG("\n"); */
	/* for (int i = 0; i < n - 1; ++i) {
		LOG("%d ", res[i]);
	}
	LOG("\n"); */
	vg[1] = f[1], cg[1] = 1;
	dfs4(1);
	/* for (int i = 0; i < n - 1; ++i) {
		printf("%d ", res[i]);
	}
	puts("");
	return 0; */
	int xors = 0;
	for (int i = 0; i < n; ++i) {
		xors ^= res[i];
	}
	/* for (int i = 0; i < n - 1; ++i) {
		LOG("%d ", res[i]);
	}
	LOG("\n"); */
	printf("%d\n", xors);
	return 0;
}