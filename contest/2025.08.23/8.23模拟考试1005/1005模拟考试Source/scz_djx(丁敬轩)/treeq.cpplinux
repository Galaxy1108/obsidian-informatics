#include <bits/stdc++.h>
using namespace std;
const int N(1000100),M(2*N);
int n,ans,w[N],t[N],f[N]; 
int e[M],ne[M],h[N],idx,top[N];
int siz[N],fa[N],faline[N],shuru[N];
vector<int> maxw;
inline int read(){
	int FF=0,RR=1;
	char ch=getchar();
	for(;!isdigit(ch);ch=getchar())
		if(ch=='-')
			RR=-1;
	for(;isdigit(ch);ch=getchar())
		FF=(FF<<1)+(FF<<3)+ch-48;
	return FF*RR;
}
int dfs(int u,int fa){
	int siz=1;
	for(int i=h[u];~i;i=ne[i]){
		int v=e[i];
		if(v!=fa){
			t[(i+4)>>1]=dfs(v,u);
			siz+=t[(i+4)>>1]; 
		}
	}
	return siz;
}
void add(int a,int b,int t){
	e[idx]=b,ne[idx]=h[a],top[idx]=t,h[a]=idx++;
}
void dfs1(int u){
	siz[u]=1;
	for(int i=h[u];~i;i=ne[i]){
		int v=e[i];
		if(v!=fa[u]){
			fa[v]=u,faline[v]=i;
			dfs1(v);
			siz[u]+=siz[v];
		}
	}
}
bool check_wi_1(){
	for(int i=2;i<=n;i++)
		if(w[i]!=1)
			return 0;
	return 1;
}
bool juhuatu(){
	for(int i=2;i<=n;i++)
		if(shuru[i]!=1)
			return 0;
	return 1;
}
int main(){
	freopen("treeq.in","r",stdin);
	freopen("treeq.out","w",stdout);
	n=read();
	memset(h,-1,sizeof(h));
	if(n<=5000){//10pts
		for(int i=2,x;i<=n;i++){
			x=read(),w[i]=read();
			add(i,x,i),add(x,i,i);
		}
		for(int i=1;i<=n;i++){
			memset(t,0,sizeof(t));
			dfs(i,-1);
			int maxi=0;
			for(int j=2;j<=n;j++)
				maxi=max(maxi,w[j]*t[j]);
			for(int j=2;j<=n;j++)
				if(w[j]*t[j]==maxi)
					f[j-1]++;
		}
		for(int i=1;i<n;i++)
			ans^=f[i];
		printf("%d",ans);
		return 0;
	}
	for(int i=2;i<=n;i++)
		shuru[i]=read(),w[i]=read();
	if(check_wi_1()){//10pts
		for(int i=2;i<=n;i++)
			add(i,shuru[i],i),add(shuru[i],i,i);
		dfs1(1);
		for(int i=1;i<=n;i++){
			int maxsiz=0;
			for(int j=h[i];~j;j=ne[j]){
				int v=e[j];
				if(v!=fa[i])
					maxsiz=max(maxsiz,siz[v]*w[top[j]]);
			}
			maxsiz=max(maxsiz,(n-siz[i])*w[top[faline[i]]]);
			for(int j=h[i];~j;j=ne[j]){
				int v=e[j];
				if(v!=fa[i]&&siz[v]*w[top[j]]==maxsiz)
					f[top[j]]++;
			}
			if((n-siz[i])*w[top[faline[i]]]==maxsiz)
				f[top[faline[i]]]++;
		}
		for(int i=1;i<=n;i++)
			ans^=f[i];
		printf("%d",ans);
		return 0;
	}
	if(juhuatu()){//10pts
		int mw=0;
		for(int i=2;i<=n;i++){
			if(w[i]>mw){
				maxw.clear();
				mw=w[i],maxw.push_back(i);
			}
			else if(w[i]==mw)
				maxw.push_back(i);
		}
		int tot=1;
		for(int i=2;i<=n;i++){
			if(w[i]*(n-1)<mw)
				tot++;
			else if(w[i]*(n-1)==mw)
				tot++,f[i]++;
			else
				f[i]++;
		}
		for(int i=0;i<maxw.size();i++)
			f[maxw[i]]+=tot;
		for(int i=1;i<=n;i++)
			ans^=f[i];
		printf("%d",ans);
		return 0;
	}
	return 0;
}
