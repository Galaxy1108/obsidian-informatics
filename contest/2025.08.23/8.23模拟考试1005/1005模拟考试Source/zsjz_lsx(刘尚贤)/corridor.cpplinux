#include<cstring>
#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
struct node{
	int ls,rs,val,tag;
}tree[10000200];
struct kkk{
	int x,y;
}d[200100];
int type,n,m,k,root1[50050],root2[50050],root3[50050],root4[50050],cnt,lst1[200100],lst2[200100],nxt1[200100],nxt2[200100];
inline int read(){
	int num=0,f=1;
	char ch=getchar();
	while(!(ch>='0'&&ch<='9')){
		if(ch=='-') f=-1;
		ch=getchar();
	}
	while(ch>='0'&&ch<='9'){
		num=num*10+ch-'0';
		ch=getchar();
	}
	return num*f;
}
void pushdown(int k){
	if(!tree[k].ls) cnt++,tree[k].ls=cnt;
	if(!tree[k].rs) cnt++,tree[k].rs=cnt;
	if(tree[k].tag){
	  tree[tree[k].ls].tag=tree[tree[k].ls].val=tree[k].tag;
	  tree[tree[k].rs].tag=tree[tree[k].rs].val=tree[k].tag;		
	}
	tree[k].tag=0;
}
void pushup(int k){
	if(!tree[k].ls) cnt++,tree[k].ls=cnt;
	if(!tree[k].rs) cnt++,tree[k].rs=cnt;
	if(tree[tree[k].ls].val==tree[tree[k].rs].val) tree[k].val=tree[tree[k].ls].val;
	else tree[k].val=0;
}
void change(int &k,int l,int r,int L,int R,int d){
	if(!k) cnt++,k=cnt;
	if(L<=l&&r<=R){
		tree[k].val=d;
		tree[k].tag=d;
		return;
	}
	pushdown(k);
	int mid=(l+r)/2;
	if(R<=mid) change(tree[k].ls,l,mid,L,R,d);
	else if(L>mid) change(tree[k].rs,mid+1,r,L,R,d);
	else change(tree[k].ls,l,mid,L,mid,d),change(tree[k].rs,mid+1,r,mid+1,R,d);
	pushup(k);
}
int query(int &k,int l,int r,int d){
	if(!k) return 0;
	if(l==r||tree[k].val) return tree[k].val;
	pushdown(k);
	int mid=(l+r)/2;
	if(d<=mid) return query(tree[k].ls,l,mid,d);
	else return query(tree[k].rs,mid+1,r,d);
}
void work(int i){
	int x=d[i].x,y=d[i].y;
	int r1=query(root1[x],0,m+1,y);
	int r2=query(root2[x],0,m+1,y);
	int r3=query(root3[y],0,n+1,x);
	int r4=query(root4[y],0,n+1,x);
	lst1[i]=r1,lst2[i]=r3;
	nxt1[i]=r2,nxt2[i]=r4;
	nxt1[r1]=i,nxt2[r3]=i;
	lst1[r2]=i,lst2[r4]=i;
	if(r1) change(root2[x],0,m+1,d[r1].y,y-1,i);
	else change(root2[x],0,m+1,0,y-1,i);
	if(r2) change(root1[x],0,m+1,y+1,d[r2].y,i);
	else change(root1[x],0,m+1,y+1,m+1,i);
	if(r3) change(root4[y],0,n+1,d[r3].x,x-1,i);
	else change(root4[y],0,n+1,0,x-1,i);
	if(r4) change(root3[y],0,n+1,x+1,d[r4].x,i);
	else change(root3[y],0,n+1,x+1,n+1,i);	
}
int main(){
	freopen("corridor.in","r",stdin);
	freopen("corridor.out","w",stdout);
	type=read(),n=read(),m=read(),k=read();
	for(register int i=1;i<=k;i++){
		d[i].x=read(),d[i].y=read();
		work(i);
	}
	int Q=read();
	while(Q--){
		int opt=read();
		if(opt==1){
			k++,d[k].x=read(),d[k].y=read();
			work(k);
		}
		else{
			int x=read(),y=read(),q=read();
			int fx=0,r=0;
			bool flag=0;
			if(x==0) fx=1;
			if(x!=n+1&&y!=m+1&&q){
				q--;
				if(fx==0) r=query(root2[x],0,m+1,y);
				else r=query(root4[y],0,n+1,x);
				if(!r){
					if(fx==0)
					printf("%d %d\n",x,m+1),y=m+1;
					else
					printf("%d %d\n",n+1,y),x=n+1;
					flag=1;
				}
				x=d[r].x,y=d[r].y;
				fx=(fx ^ 1);
			}
			if(flag) continue;
			while(x!=n+1&&y!=m+1&&q){
				q--;
				if(fx==0) r=nxt1[r];
				else r=nxt2[r];
				if(!r){
					if(fx==0)
					printf("%d %d\n",x,m+1);
					else
					printf("%d %d\n",n+1,y);
					flag=1;
					break;
				}
				x=d[r].x,y=d[r].y;
				fx=(fx ^ 1);
			}
			if(flag) continue;
			printf("%d %d\n",x,y);
		}
	}
}