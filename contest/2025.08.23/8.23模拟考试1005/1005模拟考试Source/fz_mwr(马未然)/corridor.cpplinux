#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#include <set>
#include <cassert>
#define maxc 150000
using namespace std;
int read(){
	int x=0;
	char ch=getchar();
	while(ch<'0'||ch>'9')ch=getchar();
	while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();
	return x;
}
int type,r,c,k,kx[300005],ky[300005],q,opt[300005],x[300005],y[300005],z[300005];
struct node{
	int x,y;
	bool operator <(const node &b){
		if (x!=b.x)return x<b.x;
		return y<b.y;
	}
}qwq[300005];
int cnt;
struct BLOCK{
	const int B=512;
	int maxn;
	int fa[300005];
	int nxt[300005],cnt[300005];
	void pushup(int id){
		int Bl=(id-1)*B+1,Br=min(id*B,maxn);
		for (int i=Br;i>=Bl;i--){
			if (fa[i]<=Br)nxt[i]=nxt[fa[i]],cnt[i]=cnt[fa[i]]+1;
			else nxt[i]=fa[i],cnt[i]=1;
		}
		return;
	}
	void build(){
		for (int i=1;i<=maxn;i++)fa[i]=maxn+1,nxt[i]=fa[i],cnt[i]=1;
		return;
	}
	void upd(int x,int y){
		fa[x]=y;
		pushup((x+B-1)/B);
		return;
	}
	int ask(int x,int y){
		while(y>cnt[x]&&nxt[x]<=maxn){
			y-=cnt[x];
			x=nxt[x];
		}
		while(y>0&&x<=maxn)x=fa[x],y--;
		return x;
	}
}ds;
map<int,int> id[300005];
set<int> dx[300005],dy[300005];
void ins(int x,int y){//cout<<x<<' '<<y<<endl;
	set<int>::iterator it=dx[x].lower_bound(y);
	if (it!=dx[x].end())ds.upd(id[x][y]*2-1,id[x][(*it)]*2);
	else ds.upd(id[x][y]*2-1,2*maxc+x);
	if (it!=dx[x].begin()){
		it--;
		ds.upd(id[x][(*it)]*2-1,id[x][y]*2);
	}
	dx[x].insert(y);
	it=dy[y].lower_bound(x);
	if (it!=dy[y].end())ds.upd(id[x][y]*2,id[(*it)][y]*2-1);
	else ds.upd(id[x][y]*2,3*maxc+y);
	if (it!=dy[y].begin()){
		it--;
		ds.upd(id[(*it)][y]*2,id[x][y]*2-1);
	}
	dy[y].insert(x);
	return;
}
int main(){
	freopen("corridor.in","r",stdin);
	freopen("corridor.out","w",stdout);
	type=read(),r=read(),c=read(),k=read();
	for (int i=1;i<=k;i++){
		kx[i]=read(),ky[i]=read();
		++cnt;
		qwq[cnt].x=kx[i],qwq[cnt].y=ky[i];
	}
	q=read();
	for (int i=1;i<=q;i++){
		opt[i]=read();
		if (opt[i]==1){
			x[i]=read(),y[i]=read();
			++cnt;
			qwq[cnt].x=x[i],qwq[cnt].y=y[i];
		}
		else x[i]=read(),y[i]=read(),z[i]=read();
	}
	sort(qwq+1,qwq+1+cnt);
	for (int i=1;i<=cnt;i++)id[qwq[i].x][qwq[i].y]=i;
	ds.maxn=2*maxc;	
	ds.build();
	for (int i=1;i<=k;i++)ins(kx[i],ky[i]);
	for (int i=1;i<=q;i++){
		if (opt[i]==1)ins(x[i],y[i]);
		else{
			if (x[i]==0){
				set<int>::iterator it=dy[y[i]].begin();
				if (it==dy[y[i]].end())printf("%d %d\n",r+1,y[i]);
				else{
					int p=ds.ask(id[(*it)][y[i]]*2-1,z[i]-1);
					if (p<=2*maxc)printf("%d %d\n",qwq[(p+1)/2].x,qwq[(p+1)/2].y);
					else if (p<=3*maxc)printf("%d %d\n",p-2*maxc,c+1);
					else printf("%d %d\n",r+1,p-3*maxc);
				}
			}
			else{
				set<int>::iterator it=dx[x[i]].begin();
				if (it==dx[x[i]].end())printf("%d %d\n",x[i],c+1);
				else{
					int p=ds.ask(id[x[i]][(*it)]*2,z[i]-1);
					if (p<=2*maxc)printf("%d %d\n",qwq[(p+1)/2].x,qwq[(p+1)/2].y);
					else if (p<=3*maxc)printf("%d %d\n",p-2*maxc,c+1);
					else printf("%d %d\n",r+1,p-3*maxc);
				}
			}
		}
	}
	return 0;
}