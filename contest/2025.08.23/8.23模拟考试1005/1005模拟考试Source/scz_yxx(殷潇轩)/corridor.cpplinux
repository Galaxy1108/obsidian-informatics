#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll read(){
	ll xx = 0, yy = 1; char ch = getchar();
	while(ch < '0' || ch > '9'){
		if (ch == '-')yy = -1;
		else yy = 1;
		ch = getchar();
	}
	while(ch >= '0' && ch <= '9'){
		xx = xx * 10 + ch - '0'; ch = getchar();
	}
	return xx * yy;
}
ll n, m, q;
struct node{
	vector <int> ex[50001], ey[50001];
	void initt(){;}
	void apush(int x, int y){
		ex[x].push_back(y); int k = ex[x].size() - 1;
		while(k > 0 && ex[x][k] < ex[x][k - 1]){
			swap(ex[x][k], ex[x][k - 1]); --k;
		}
		
		ey[y].push_back(x); k = ey[y].size() - 1;
		while(k > 0 && ey[y][k] < ey[y][k - 1]){
			swap(ey[y][k], ey[y][k - 1]); --k;
		}
	}
	int findx(int x, int y){
		int l = 0, len = ey[y].size(),r = len - 1;
		while(l < r){
			int mid = (l + r)>>1;
			if (ey[y][mid] <= x)l = mid + 1;
			else r = mid; 
		}
		if (l > (len - 1)) return m + 1;
		else if (ey[y][l] <= x) return m + 1;
		else return ey[y][l]; 
	}
	int findy(int x, int y){
		int l = 0, len = ex[x].size(),r = len - 1;
		while(l < r){
			int mid = (l + r)>>1;
			if (ex[x][mid] <= y)l = mid + 1;
			else r = mid; 
		}
		if (l > (len - 1)) return n + 1;
		else if (ex[x][l] <= y) return n + 1;
		else return ex[x][l];
	}
}a;
int main(){
	freopen("corridor.in", "r", stdin);
	freopen("corridor.out", "w", stdout);
	n = read(), n = read(), m = read(), q = read();
	a.initt();
	int x, y, w, t;
	while(q--){
		x = read(), y = read();
		a.apush(x, y);
	}
	q = read();
	while(q--){
		w = read();
		if (w == 2){
			x = read(), y = read(), t = read();
			if (x == 0){
				x = a.findx(x, y); --t;
			}
			while(t){
				if (t < 1 || x == n + 1){
					break;
				}
				y = a.findy(x, y); --t;
				if (t < 1 || y == m + 1){
					break;
				}
				x = a.findx(x, y); --t;
			}
			printf("%lld %lld\n", x, y);
		}
		else {
			x = read(), y = read();
			a.apush(x, y); 
		}
	}
	return 0;
}
