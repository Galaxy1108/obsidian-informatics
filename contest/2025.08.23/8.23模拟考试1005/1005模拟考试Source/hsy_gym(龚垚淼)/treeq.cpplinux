#include<iostream>
#include<cstring>
#include<vector>
#define mn 10000010
#define inf 0x3f3f3f3f3f3f3f3f
#define ll long long
#define FOR(i,x,y) for(int i=x;i<=y;++i)
using namespace std;
int n,cnt;
ll siz[mn];
ll f[mn];
ll maxn;
namespace io {
	const int __SIZE = (1 << 21) + 1;
	char ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;
	#define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)
	inline void flush () { fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; }
	inline void gc (char &x) { x = Gc(); }
	inline void pc (char x) { *oS ++ = x; if (oS == oT) flush (); }
	inline void pstr (const char *s) { int __len = strlen(s); for (__f = 0; __f < __len; ++__f) pc (s[__f]); }
	inline void gstr (char *s) { for(__c = Gc(); __c < 32 || __c > 126 || __c == ' ';)  __c = Gc();
		for(; __c > 31 && __c < 127 && __c != ' ' && __c != '\n' && __c != '\r'; ++s, __c = Gc()) *s = __c; *s = 0; }
	template <class I> inline bool gi (I &x) { _eof = 0;
		for (__f = 1, __c = Gc(); (__c < '0' || __c > '9') && !_eof; __c = Gc()) { if (__c == '-') __f = -1; _eof |= __c == EOF; }
		for (x = 0; __c <= '9' && __c >= '0' && !_eof; __c = Gc()) x = x * 10 + (__c & 15), _eof |= __c == EOF; x *= __f; return !_eof; }
	template <class I> inline void print (I x) { if (!x) pc ('0'); if (x < 0) pc ('-'), x = -x;
		while (x) qu[++ qr] = x % 10 + '0',  x /= 10; while (qr) pc (qu[qr --]); }
	struct Flusher_ {~Flusher_(){flush();}}io_flusher_;
} using io::pc; using io::gc; using io::pstr; using io::gstr; using io::gi; using io::print;
struct node
{
	int to;
	int cst;
	int id;
};
vector<node>G[mn];
inline void getsiz(int u,int fa)
{
	siz[u]=1;
	for(node v:G[u])
	{
		if(v.to==fa)continue;
		getsiz(v.to,u);
		siz[u]+=siz[v.to];
	    maxn=max(maxn,siz[v.to]*v.cst);
	}
}
inline void getres(int u,int fa)
{
	for(node v:G[u])
	{
		if(v.to==fa)continue;
		getres(v.to,u);
	    if(siz[v.to]*v.cst==maxn)f[v.id]++;
	}
}
int main()
{
	freopen("treeq.in","r",stdin);
	freopen("treeq.out","w",stdout);
	gi(n);
	int u,w;
	FOR(i,1,n-1)
	{
		gi(u),gi(w);
		G[u].push_back({i+1,w,++cnt});
		G[i+1].push_back({u,w,cnt});
	}
	FOR(i,1,n)
	{
		maxn=0;
		getsiz(i,0);
		getres(i,0);
	}
	ll ans(f[1]);
	FOR(i,2,n-1)ans^=f[i];
	print(ans);
	return 0;
}