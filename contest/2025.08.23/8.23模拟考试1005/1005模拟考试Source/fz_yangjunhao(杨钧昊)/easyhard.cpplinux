#include<cstdio>
#include<cctype>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;
inline char nc()
{
	static char buf[1000010],*l,*r;
	return l==r&&(r=(l=buf)+fread(buf,1,1000010,stdin),l==r)?EOF:*l++;
}
template <class code>inline code read(const code &a)
{
    code x=0;short w=0;char ch=0;
    while(!isdigit(ch)) {w|=ch=='-';ch=nc();}
    while(isdigit(ch)) {x=(x<<3)+(x<<1)+(ch^48);ch=nc();}
    return w?-x:x;
}
void print(int x){
	if(x<0)putchar('-'),x=-x;
	if(x>=10)print(x/10);
	putchar(x%10+48);
}
int dp[2][6005],n,m,p;
int add(int x){
    return x>=p?x-p:x;
}
signed main()
{
	freopen("easyhard.in","r",stdin);
	freopen("easyhard.out","w",stdout);
    n=read(n),m=read(m),p=read(p);
    --n;--m;
    dp[0][n]=1;
    for(int i=1;i<=m;i++){
        bool op=i&1;
        memset(dp[op],0,sizeof(dp[op]));
        for(int j=n-min(i,n);j<=n+min(i,n);j++){
            if(j>0)dp[op][j]=add(dp[op][j]+dp[op^1][j-1]);
            dp[op][j]=add(dp[op][j]+dp[op^1][j+1]);
            dp[op][j]=add(dp[op][j]+add(dp[op^1][j]*2));
        }        
    }
    int ans=0;
    for(int i=0;i<=2*n;i++){
        ans=add(ans+add(2*dp[m&1][i]));
    }
    printf("%d\n",ans*2%p);
	return 0;
}