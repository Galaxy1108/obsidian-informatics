#include<bits/stdc++.h>
using namespace std;
namespace io {
	const int __SIZE = (1 << 21) + 1;
	char ibuf[__SIZE], *iS, *iT, obuf[__SIZE], *oS = obuf, *oT = oS + __SIZE - 1, __c, qu[55]; int __f, qr, _eof;
	#define Gc() (iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)
	inline void flush () { fwrite (obuf, 1, oS - obuf, stdout), oS = obuf; }
	inline void gc (char &x) { x = Gc(); }
	inline void pc (char x) { *oS ++ = x; if (oS == oT) flush (); }
	template <class I> inline bool gi (I &x) { _eof = 0;
		for (__f = 1, __c = Gc(); (__c < '0' || __c > '9') && !_eof; __c = Gc()) { if (__c == '-') __f = -1; _eof |= __c == EOF; }
		for (x = 0; __c <= '9' && __c >= '0' && !_eof; __c = Gc()) x = x * 10 + (__c & 15), _eof |= __c == EOF; x *= __f; return !_eof; }
	template <class I> inline void print (I x) { if (!x) pc ('0'); if (x < 0) pc ('-'), x = -x;
		while (x) qu[++ qr] = x % 10 + '0',  x /= 10; while (qr) pc (qu[qr --]); }
	struct Flusher_ {~Flusher_(){flush();}}io_flusher_;
} using io::pc; using io::gc; using io::gi; using io::print;
int ty,n,m,k,u,v,q,w,qq;
namespace force{
	int a[105][105];
	inline void dfs(int &x,int &y,int lq,int dir){
		if(x==n+1||y==m+1||!lq)return;
		if(a[x][y]){
			if(lq==1)return;
			if(dir){
				dfs(++x,y,lq-1,0);
				return;
			}
			else{
				dfs(x,++y,lq-1,1);
				return;
			}
		}
		if(dir){
			dfs(x,++y,lq,1);
			return;
		}
		else{
			dfs(++x,y,lq,0);
			return;
		}
	}
	inline void init(){
		for(int i(1);i<=k;++i)gi(u),gi(v),a[u][v]=1;
		gi(q);
		for(int i(1);i<=q;++i){
			gi(w),gi(u),gi(v);
			if(w==1)a[u][v]=1;
			else{
				gi(qq);
				if(v)dfs(++u,v,qq,0);
				else dfs(u,++v,qq,1);
				print(u),pc(' '),print(v),pc('\n');
			}
		}
	}
}
namespace sp1{
	vector<int> row[20005],line[20005];
	int dir,to;
	inline void init(){
		for(int i(1);i<=k;++i)gi(u),gi(v),row[u].push_back(v),line[v].push_back(u);
		gi(q);
		for(int i(1);i<=q;++i){
			gi(w),gi(u),gi(v),gi(qq);
			dir=u;
			if(u)++v;
			else ++u;
			while(qq--){
				to=2e9;
				if(dir){
					for(int i(0);i<row[u].size();++i)if(row[u][i]>v)to=min(to,row[u][i]);
					if(to==2e9){
						v=m+1;
						break;
					}
					else v=to;
					dir=0;
				}
				else{
					for(int i(0);i<line[v].size();++i)if(line[v][i]>u)to=min(to,line[v][i]);
					if(to==2e9){
						u=n+1;
						break;
					}
					else u=to;
					dir=1;
				}
			}
			print(u),pc(' '),print(v),pc('\n');
		}
	}
}
int main(){
	freopen("corridor.in","r",stdin);
	freopen("corridor.out","w",stdout);
	gi(ty),gi(n),gi(m),gi(k);
	if(ty==0)force::init();
	if(ty==1)sp1::init();
	return 0;
}