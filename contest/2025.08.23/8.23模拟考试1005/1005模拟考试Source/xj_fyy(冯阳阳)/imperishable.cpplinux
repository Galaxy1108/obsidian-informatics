#include<bits/stdc++.h>
using namespace std;
#define N 200005
#define ll long long
int read(){
	int w=0,f=1;
	char c=' ';
	while(c<'0'||c>'9')c=getchar(),f=c=='-'?-1:f;
	while(c>='0'&&c<='9')w=w*10+c-48,c=getchar();
	return w*f;
}
const int mod=998244353;
int reduce(int x){
	return x>=mod?x-mod:x;
}
void inc(int&x,int y){
	x+=y,x=x>=mod?x-mod:x;
}
int Num;
namespace sub1{
	int n,a[N],q,p2[N];
	ll w[N];
	void init(){
		p2[0]=1;
		for(int i=1;i<N;i++)
			p2[i]=reduce(p2[i-1]<<1);
	}
	void solve(){
		for(int i=1;i<=n;i++)
			w[i]=w[i-1]+a[i];
		int maxn=0,ans=0;
		for(int i=n;i>0;i--){
			if(w[i-1]<maxn)maxn-=a[i],inc(ans,p2[i]);
			else{
				maxn=max(maxn,a[i]);
				if(w[i-1]<maxn)return inc(ans,p2[i]),printf("%d\n",ans),void();
			}
		}
		printf("%d\n",ans);
	}
	void main(){
		n=read();
		for(int i=1;i<=n;i++)
			a[i]=read();
		init(),solve();
		q=read();
		while(q--){
			int x=read(),y=read();
			a[x]=y,solve();
		}
	}
}
namespace sub2{
	int n,a[N],q,p2[N];
	struct seg{
		int maxn[N<<2];
		ll val[N<<2];
		void build(int p,int l,int r){
			if(l==r)return val[p]=maxn[p]=a[l],void();
			int mid=(l+r)>>1;
			build(p<<1,l,mid);
			build(p<<1|1,mid+1,r);
			maxn[p]=max(maxn[p<<1],maxn[p<<1|1]);
			val[p]=val[p<<1]+val[p<<1|1];
		}
		void update(int p,int x,int v,int l,int r){
			if(l==r)return val[p]=maxn[p]=v,void();
			int mid=(l+r)>>1;
			if(x<=mid)update(p<<1,x,v,l,mid);
			else update(p<<1|1,x,v,mid+1,r);
			maxn[p]=max(maxn[p<<1],maxn[p<<1|1]);
			val[p]=val[p<<1]+val[p<<1|1];
		}
		int qmax(int p,int x,int y,int l,int r){
			if(x<=l&&r<=y)return maxn[p];
			int mid=(l+r)>>1;
			if(y<=mid)return qmax(p<<1,x,y,l,mid);
			if(x>mid)return qmax(p<<1|1,x,y,mid+1,r);
			return max(qmax(p<<1,x,y,l,mid),qmax(p<<1|1,x,y,mid+1,r));
		}
		ll qval(int p,int x,int y,int l,int r){
			if(x<=l&&r<=y)return val[p];
			int mid=(l+r)>>1;
			if(y<=mid)return qval(p<<1,x,y,l,mid);
			if(x>mid)return qval(p<<1|1,x,y,mid+1,r);
			return qval(p<<1,x,y,l,mid)+qval(p<<1|1,x,y,mid+1,r);
		}
	}T;
	void init(){
		T.build(1,1,n),p2[0]=1;
		for(int i=1;i<N;i++)
			p2[i]=reduce(p2[i-1]<<1);
	}
	void update(int x,int y){
		a[x]=y,T.update(1,x,y,1,n);
	}
	int qmax(int l,int r){
		return l>r?0:T.qmax(1,l,r,1,n);
	}
	ll qval(int l,int r){
		return l>r?0:T.qval(1,l,r,1,n);
	}
	void solve(){
		int m=n,ans=0,maxn=0;
		if(qval(1,n-1)<a[n])ans=p2[n],m=0;
		while(m){
			int l=1,r=m,res=m;
			while(l<=r){
				int mid=(l+r)>>1;
				if(qval(1,mid)>=max(qmax(mid+1,m),maxn))res=mid,r=mid-1;
				else l=mid+1;
			}
			maxn=max(maxn,qmax(res+1,m)),m=res-1,inc(ans,p2[res]),maxn-=a[res];
			if(qval(1,m)<maxn)return inc(ans,p2[res]),printf("%d\n",ans),void();
		}
		printf("%d\n",ans);
	}
	void main(){
		n=read();
		for(int i=1;i<=n;i++)
			a[i]=read();
		init(),solve();
		q=read();
		while(q--){
			int x=read(),y=read();
			update(x,y),solve();
		}
	}
}
signed main(){
	// freopen("imperishable2.in","r",stdin);
	// freopen("out.out","w",stdout);
	freopen("imperishable.in","r",stdin);
	freopen("imperishable.out","w",stdout);
	Num=read();
	if(Num<=17)sub1::main();
	else sub2::main();
	return 0;
}