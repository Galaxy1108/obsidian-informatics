#include<bits/stdc++.h>
using namespace std;
inline int read(){
	int sum = 0, fh = 1; char ch = getchar();
	while (!isdigit(ch)) {if (ch == '-') fh = -1; ch = getchar();}
	while (isdigit(ch)) {sum = sum * 10 + ch - '0'; ch = getchar();}
	return sum*fh;
}
const int MAXN = 110, MAXK = 2100;
int ty, n, m, k, q;
bool G[MAXN][MAXN];
const int dx[5] = {0, 0, 0, 1, -1};//R,L,D,U
const int dy[5] = {0, 1, -1, 0, 0};
int turn(int fx)
{
	if(fx == 1)return 3;
	if(fx == 2)return 4;
	if(fx == 3)return 1;
	if(fx == 4)return 2;
}
void dfs(int x, int y, int num, int fx, bool flag)
{
//	cout << x << ' ' << y << endl;
	if(x > n || y > m || num >= q)
	{
		cout << x << ' ' << y << endl;
		return ;
	}
	if(G[x][y] == 1 && flag)
	{
		int t = turn(fx);
		dfs(x, y, num + 1, turn(fx), 0);
	}
	else
	{
		dfs(x + dx[fx], y + dy[fx], num, fx, 1);
	}
}
int main()
{
	freopen("corridor.in", "r", stdin);
	freopen("corridor.out", "w", stdout);)
	ty = read(); n = read(); m = read(); k = read();
	for (int i = 1; i <= k; i++)
	{
		int x = read(), y =read();
		G[x][y] = 1;
	}
	int t = read();
	while (t--)
	{
		int opt = read();
		if (opt == 1)
		{
			int x = read(), y = read();
			G[x][y] = 1;
		}
		else
		{
			int x = read(), y = read(); q = read();
			dfs(x, y, 0, (x == 0) ? 3 : 1, 1);
		}
	}
	return 0;
}