// #pragma GCC optimize("O3")
// // #pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#include <bits/stdc++.h>
using namespace std;

#define PB emplace_back
// #define int long long
#define ll long long
#define vi vector<int>
#define siz(a) ((int)((a).size()))
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define per(i, a, b) for (int i = (a); i >= (b); --i)

const int N = 3000;
int a, b, mod, f[N + 5][N + 5][2];

signed main() {
	freopen("easyhard.in", "r", stdin);
	freopen("easyhard.out", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	cin >> a >> b >> mod;
	rep(i, 1, a) f[0][i][0] = 1;
	f[0][0][1] = 1;
	rep(i, 0, b - 1) rep(j, 0, a) {
		if(j) {
			(f[i + 1][j][j == 1] += f[i][j][0]) %= mod;
			(f[i + 1][j][1] += f[i][j][1]) %= mod;
			(f[i + 1][j - 1][j - 1 == 0] += f[i][j][0]) %= mod;
			(f[i + 1][j - 1][1] += f[i][j][1]) %= mod;
		}
		if(j != a) {
			(f[i + 1][j][0] += f[i][j][0]) %= mod;
			(f[i + 1][j][1] += f[i][j][1]) %= mod;
			(f[i + 1][j + 1][0] += f[i][j][0]) %= mod;
			(f[i + 1][j + 1][1] += f[i][j][1]) %= mod;
		}
	}
	int ans = 0;
	rep(i, 0, a) (ans += f[b][i][1]) %= mod;
	cout << ans;
	return 0;
}