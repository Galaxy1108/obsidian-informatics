#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <string>
#include <queue>
#include <deque>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <set>
#define LL long long
#define ULL unsigned long long
#define IT set<int>::iterator
using namespace std;
const int MAXN = 5005;
int n, u[MAXN], v[MAXN], w[MAXN];
vector<int> g[MAXN << 1];
int dep[MAXN], f[MAXN][21], sz[MAXN], c[MAXN][MAXN], ans[MAXN], res, maxid[MAXN];
int read()
{
	int x = 0;
	bool flag = 1;
	char c = getchar();
	while(c < '0' || c > '9')
	{
		if(c == '-') flag = 0;
		c = getchar();
	}
	while(c >= '0' && c <= '9')
	{
		x = (x << 3) + (x << 1) + c - '0';
		c = getchar();
	}
	return flag ? x : ~(x - 1);
}
void dfs(int x, int fa, int depth)
{
	f[x][0] = fa;
//	printf("f[%d] = %d\n", x, fa);
	for(int i = 1; i <= 20; ++i)
	{
		f[x][i] = f[f[x][i - 1]][i - 1];
//		printf("f[%d][%d] = %d\n", x, i, f[x][i]);
	}
	dep[x] = depth;
	sz[x] = 1;
	for(int i = 0; i < g[x].size(); ++i)
	{
		int v = g[x][i];
		if(v == fa) continue;
		dfs(v, x, depth + 1);
		sz[x] += sz[v];
	}
//	printf("sz%d = %d\n", x, sz[x]);
}
int LCA(int a, int b)
{
	if(dep[a] < dep[b]) swap(a, b);
	for(int k = 19; k >= 0; --k)
		if(dep[f[a][k]] >= dep[b]) a = f[a][k];
	if(a == b) return a;
	for(int k = 19; k >= 0; --k)
		if(f[a][k] != f[b][k]) a = f[a][k], b = f[b][k];
	return f[a][0];
}
int main()
{
	freopen("treeq.in", "r", stdin);
	freopen("treeq.out", "w", stdout);
	n = read();
	for(int i = 1; i <= n - 1; ++i)
	{
		u[i] = read(), v[i] = read(), w[i] = read();
		g[u[i]].push_back(v[i]);
		g[v[i]].push_back(u[i]);
	}
	dfs(1, 1, 0);
	for(int i = 1; i <= n - 1; ++i) //±ß
	{
		for(int j = 1; j <= n; ++j) //µã 
		{
			if(dep[u[i]] < dep[v[i]]) //uÔÚÉÏÃæ
			{
//				printf("lca%d %d = %d\n", u[i], j, LCA(u[i], j));
				if(LCA(v[i], j) == v[i]) //iÔÚ×ÓÊ÷ÄÚ
				{
					c[j][i] = sz[1] - sz[v[i]];
//					printf("1\n");
//					printf("c%d %d = %d\n", j, i, c[j][i]);
				}
				else
				{
					c[j][i] = sz[v[i]];
//					printf("2\n");
//					printf("c%d %d = %d\n", j, i, c[j][i]);
				}
			}
			else //vÔÚÉÏÃæ 
			{
//				printf("lca%d %d = %d\n", v[i], j, LCA(v[i], j));
				if(LCA(u[i], j) == u[i])
				{
					c[j][i] = sz[1] - sz[u[i]];
//					printf("3\n");
//					printf("c%d %d = %d\n", j, i, c[j][i]);
				}
				else
				{
					c[j][i] = sz[u[i]];
//					printf("4\n");
//					printf("c%d %d = %d\n", j, i, c[j][i]);
				}
			}
//			printf("c%d %d = %d\n", j, i, c[j][i]);
		}
	}
	for(int i = 1; i <= n; ++i)
	{
		int maxn = 0, cnt = 0;
		for(int j = 1; j <= n - 1; ++j)
		{
			if(c[i][j] * w[j] > maxn)
			{
				maxn = c[i][j] * w[j];
				cnt = 0;
				maxid[++cnt] = j;
			}
			else if(c[i][j] * w[j] == maxn)
			{
				maxid[++cnt] = j;
			}
		}
		for(int j = 1; j <= cnt; ++j)
		{
			++ans[maxid[j]];
//			printf("%d:%d %d\n", i, maxid[j], maxn);
		}
			
	}
	for(int i = 1; i <= n - 1; ++i)
	{
//		printf("%d ", ans[i]);
		res ^= ans[i];
	}
//	puts("");
	printf("%d\n", res);
	return 0;
}
