#pragma GCC optimize(3)
#pragma GCC target("avx,sse2,sse3,sse4,mmx")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("inline-functions")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("inline-small-functions")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("inline-functions-called-once")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#include<bits/stdc++.h>
using namespace std;
long long a,b,q,w,e,cnt,h[1000001],o,si[1000001],an,f[1000001],v[1000001];
struct p{long long q,w,e,id;}l[2000001],m[1000001];
unordered_map<long long,long long> ve[1000001],tg;
set<long long> ma[2000001];
set<long long>::iterator it;
void add(long long qq,long long ww,long long ee,long long id){l[++o].q=ww,l[o].w=h[qq],h[qq]=o,l[o].e=ee,l[o].id=id;}
struct pp{long long q,w;bool operator < (const pp &aa) const{return w<aa.w;};};
priority_queue<pp> qu;
void dfs(long long qq,long long ww,long long ee)
{
	si[qq]=1;for(int i=h[qq];i;i=l[i].w) if(l[i].q!=ww) dfs(l[i].q,qq,l[i].e),si[qq]+=si[l[i].q];
	if(qq!=1)
	{
		if(!tg[si[qq]*ee]) tg[si[qq]*ee]=++cnt;v[ve[qq][ww]]=qq;
		qu.push(pp{ve[qq][ww],si[qq]*ee}),ma[tg[si[qq]*ee]].insert(ve[qq][ww]);
	}
}
void dfs1(long long qq,long long ww)
{
	for(int i=h[qq];i;i=l[i].w)
	{
		if(l[i].q!=ww)
		{
			long long t1=si[l[i].q],t2=si[qq];v[l[i].q]=0;
			if(!tg[si[l[i].q]*l[i].e]) tg[si[l[i].q]*l[i].e]=++cnt;v[l[i].id]=qq;
			ma[tg[si[l[i].q]*l[i].e]].erase(l[i].id);
			si[qq]=t2-t1,si[l[i].q]=t2;qu.push(pp{l[i].id,si[qq]*l[i].e});
			if(!tg[si[qq]*l[i].e]) tg[si[qq]*l[i].e]=++cnt;
			ma[tg[si[qq]*l[i].e]].insert(l[i].id);
			while(!qu.empty())
			{
				pp r=qu.top();
				if(!v[r.q]||r.w!=m[r.q].e*si[v[r.q]]) qu.pop();
				else break;
			}long long tt=tg[qu.top().w];
			for(it=ma[tt].begin();it!=ma[tt].end();++it) f[*it]++;
			dfs1(l[i].q,qq);ma[tg[si[qq]*l[i].e]].erase(l[i].id);v[l[i].id]=l[i].q;
			si[l[i].q]=t1,si[qq]=t2;ma[tg[si[l[i].q]*l[i].e]].insert(l[i].id);v[qq]=0;
		}
	}
}
int main()
{
	freopen("treeq.in","r",stdin);
	freopen("treeq.out","w",stdout);
	scanf("%lld",&a);
	for(int i=1;i<a;i++)
	{
		q=i+1;scanf("%lld%lld",&w,&e);m[i]=p{q,w,e,i};
		add(q,w,e,i),add(w,q,e,i);ve[q][w]=ve[w][q]=i;
	}dfs(1,0,0);
	long long tt=tg[qu.top().w];
	for(it=ma[tt].begin();it!=ma[tt].end();++it) f[*it]++;
	dfs1(1,0);
	for(int i=1;i<a;i++) an^=f[i];
	printf("%lld",an);
	return 0;
}